
doancuoiky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000807c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e8  080082e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f0  080082f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080082f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000007c  08008374  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08008374  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001927f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003285  00000000  00000000  0003936e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0003c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001195  00000000  00000000  0003dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d93  00000000  00000000  0003ee25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a13d  00000000  00000000  00067bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112f17  00000000  00000000  00081cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000675c  00000000  00000000  00194c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0019b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008244 	.word	0x08008244

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08008244 	.word	0x08008244

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <Read_Temperature.0>:
  };



  float Read_Temperature(void)
  {
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4664      	mov	r4, ip
 8000e10:	f8c7 c004 	str.w	ip, [r7, #4]
      uint32_t sum = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
      const int NUM_SAMPLES = 10;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	60fb      	str	r3, [r7, #12]

      for (int i = 0; i < NUM_SAMPLES; ++i)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e019      	b.n	8000e56 <Read_Temperature.0+0x4e>
      {
          HAL_ADC_Start(&hadc1);
 8000e22:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <Read_Temperature.0+0xc0>)
 8000e24:	f001 fab2 	bl	800238c <HAL_ADC_Start>
          if (HAL_ADC_PollForConversion(&hadc1, 50) == HAL_OK)
 8000e28:	2132      	movs	r1, #50	; 0x32
 8000e2a:	4827      	ldr	r0, [pc, #156]	; (8000ec8 <Read_Temperature.0+0xc0>)
 8000e2c:	f001 fbc6 	bl	80025bc <HAL_ADC_PollForConversion>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d106      	bne.n	8000e44 <Read_Temperature.0+0x3c>
          {
              sum += HAL_ADC_GetValue(&hadc1);
 8000e36:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <Read_Temperature.0+0xc0>)
 8000e38:	f001 fcc6 	bl	80027c8 <HAL_ADC_GetValue>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	4413      	add	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
          }
          HAL_ADC_Stop(&hadc1);
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <Read_Temperature.0+0xc0>)
 8000e46:	f001 fb85 	bl	8002554 <HAL_ADC_Stop>
          HAL_Delay(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f000 fe32 	bl	8001ab4 <HAL_Delay>
      for (int i = 0; i < NUM_SAMPLES; ++i)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	3301      	adds	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbe1      	blt.n	8000e22 <Read_Temperature.0+0x1a>
      }

      adc_value = sum / NUM_SAMPLES;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	6063      	str	r3, [r4, #4]
      dienap = ((float)adc_value * 5.0) / 4095.0; // dổi giá trị ADC thành điện áp (V)
 8000e68:	6863      	ldr	r3, [r4, #4]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e72:	ee17 0a90 	vmov	r0, s15
 8000e76:	f7ff fb8f 	bl	8000598 <__aeabi_f2d>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <Read_Temperature.0+0xc4>)
 8000e80:	f7ff fbe2 	bl	8000648 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	a30c      	add	r3, pc, #48	; (adr r3, 8000ec0 <Read_Temperature.0+0xb8>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fd03 	bl	800089c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fde5 	bl	8000a6c <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6023      	str	r3, [r4, #0]
      return dienap * 100.0;
 8000ea6:	edd4 7a00 	vldr	s15, [r4]
 8000eaa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ed0 <Read_Temperature.0+0xc8>
 8000eae:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8000eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	00000000 	.word	0x00000000
 8000ec4:	40affe00 	.word	0x40affe00
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	40140000 	.word	0x40140000
 8000ed0:	42c80000 	.word	0x42c80000

08000ed4 <main>:
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b097      	sub	sp, #92	; 0x5c
 8000ed8:	af00      	add	r7, sp, #0
int main(void)
 8000eda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ede:	653b      	str	r3, [r7, #80]	; 0x50
  HAL_Init();
 8000ee0:	f000 fd77 	bl	80019d2 <HAL_Init>
  SystemClock_Config();
 8000ee4:	f000 f8fa 	bl	80010dc <SystemClock_Config>
  MX_GPIO_Init();
 8000ee8:	f000 faa4 	bl	8001434 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000eec:	f000 f9b8 	bl	8001260 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000ef0:	f000 f93e 	bl	8001170 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ef4:	f000 f9fe 	bl	80012f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ef8:	f000 fa48 	bl	800138c <MX_TIM1_Init>
  uint32_t adc_value = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  float dienap = 0.0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t nhietdo = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t dem = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint16_t led_pins[8] = {
 8000f12:	4b61      	ldr	r3, [pc, #388]	; (8001098 <main+0x1c4>)
 8000f14:	f107 040c 	add.w	r4, r7, #12
 8000f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1){
 8000f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f22:	485e      	ldr	r0, [pc, #376]	; (800109c <main+0x1c8>)
 8000f24:	f003 faf6 	bl	8004514 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d107      	bne.n	8000f3e <main+0x6a>
		dem++;
 8000f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f32:	3301      	adds	r3, #1
 8000f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		HAL_Delay(200);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f000 fdbb 	bl	8001ab4 <HAL_Delay>
	}

          nhietdo = Read_Temperature();
 8000f3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f42:	469c      	mov	ip, r3
 8000f44:	f7ff ff60 	bl	8000e08 <Read_Temperature.0>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
 8000f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f50:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f54:	793b      	ldrb	r3, [r7, #4]
 8000f56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		  if (nhietdo >= 70.0)
 8000f5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f5e:	2b45      	cmp	r3, #69	; 0x45
 8000f60:	d909      	bls.n	8000f76 <main+0xa2>
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f003 fb03 	bl	8004574 <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 8000f6e:	20c8      	movs	r0, #200	; 0xc8
 8000f70:	f000 fda0 	bl	8001ab4 <HAL_Delay>
 8000f74:	e006      	b.n	8000f84 <main+0xb0>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f003 fae0 	bl	8004544 <HAL_GPIO_WritePin>
		  }

           // dùng uart để truyền lên giao diện


		  sprintf(st1,"%d-%d\n", nhietdo,dem);
 8000f84:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8c:	f107 0020 	add.w	r0, r7, #32
 8000f90:	4943      	ldr	r1, [pc, #268]	; (80010a0 <main+0x1cc>)
 8000f92:	f006 fcb3 	bl	80078fc <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)st1, strlen(st1),100);
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f940 	bl	8000220 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f107 0120 	add.w	r1, r7, #32
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	483e      	ldr	r0, [pc, #248]	; (80010a4 <main+0x1d0>)
 8000fac:	f005 f98e 	bl	80062cc <HAL_UART_Transmit>



	      if (HAL_UART_Receive(&huart1, &data, 1, 100) == HAL_OK)
 8000fb0:	f107 011f 	add.w	r1, r7, #31
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	483a      	ldr	r0, [pc, #232]	; (80010a4 <main+0x1d0>)
 8000fba:	f005 fa15 	bl	80063e8 <HAL_UART_Receive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ac      	bne.n	8000f1e <main+0x4a>
	{
		if (data >= '1' && data <= '8')
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	2b30      	cmp	r3, #48	; 0x30
 8000fc8:	d911      	bls.n	8000fee <main+0x11a>
 8000fca:	7ffb      	ldrb	r3, [r7, #31]
 8000fcc:	2b38      	cmp	r3, #56	; 0x38
 8000fce:	d80e      	bhi.n	8000fee <main+0x11a>
		{

			HAL_GPIO_WritePin(GPIOB, led_pins[data - '1'], 1); // Bật LED tương ứng
 8000fd0:	7ffb      	ldrb	r3, [r7, #31]
 8000fd2:	3b31      	subs	r3, #49	; 0x31
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	3350      	adds	r3, #80	; 0x50
 8000fd8:	f107 0208 	add.w	r2, r7, #8
 8000fdc:	4413      	add	r3, r2
 8000fde:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4830      	ldr	r0, [pc, #192]	; (80010a8 <main+0x1d4>)
 8000fe8:	f003 faac 	bl	8004544 <HAL_GPIO_WritePin>
 8000fec:	e052      	b.n	8001094 <main+0x1c0>
		}
		else if (data >= 'a' && data <= 'h')
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	2b60      	cmp	r3, #96	; 0x60
 8000ff2:	d911      	bls.n	8001018 <main+0x144>
 8000ff4:	7ffb      	ldrb	r3, [r7, #31]
 8000ff6:	2b68      	cmp	r3, #104	; 0x68
 8000ff8:	d80e      	bhi.n	8001018 <main+0x144>
		{
			HAL_GPIO_WritePin(GPIOB, led_pins[data - 'a'], 0); // Tắt LED tương ứng
 8000ffa:	7ffb      	ldrb	r3, [r7, #31]
 8000ffc:	3b61      	subs	r3, #97	; 0x61
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	3350      	adds	r3, #80	; 0x50
 8001002:	f107 0208 	add.w	r2, r7, #8
 8001006:	4413      	add	r3, r2
 8001008:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4825      	ldr	r0, [pc, #148]	; (80010a8 <main+0x1d4>)
 8001012:	f003 fa97 	bl	8004544 <HAL_GPIO_WritePin>
 8001016:	e03d      	b.n	8001094 <main+0x1c0>
		}
		else if (data == 'T') //0.5s
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	2b54      	cmp	r3, #84	; 0x54
 800101c:	d10c      	bne.n	8001038 <main+0x164>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim1,3599);
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <main+0x1d8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <main+0x1d8>)
 800102a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800102e:	60da      	str	r2, [r3, #12]
			 HAL_TIM_Base_Start_IT(&htim1);
 8001030:	481e      	ldr	r0, [pc, #120]	; (80010ac <main+0x1d8>)
 8001032:	f004 fbc9 	bl	80057c8 <HAL_TIM_Base_Start_IT>
 8001036:	e772      	b.n	8000f1e <main+0x4a>

		}
		else if (data == 'U')//1s
 8001038:	7ffb      	ldrb	r3, [r7, #31]
 800103a:	2b55      	cmp	r3, #85	; 0x55
 800103c:	d10c      	bne.n	8001058 <main+0x184>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim1,7199);
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <main+0x1d8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <main+0x1d8>)
 800104a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800104e:	60da      	str	r2, [r3, #12]
			 HAL_TIM_Base_Start_IT(&htim1);
 8001050:	4816      	ldr	r0, [pc, #88]	; (80010ac <main+0x1d8>)
 8001052:	f004 fbb9 	bl	80057c8 <HAL_TIM_Base_Start_IT>
 8001056:	e762      	b.n	8000f1e <main+0x4a>

		}
		else if (data == 'V')//2s
 8001058:	7ffb      	ldrb	r3, [r7, #31]
 800105a:	2b56      	cmp	r3, #86	; 0x56
 800105c:	d10c      	bne.n	8001078 <main+0x1a4>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim1,14399);
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <main+0x1d8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f643 023f 	movw	r2, #14399	; 0x383f
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <main+0x1d8>)
 800106a:	f643 023f 	movw	r2, #14399	; 0x383f
 800106e:	60da      	str	r2, [r3, #12]
			 HAL_TIM_Base_Start_IT(&htim1);
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <main+0x1d8>)
 8001072:	f004 fba9 	bl	80057c8 <HAL_TIM_Base_Start_IT>
 8001076:	e752      	b.n	8000f1e <main+0x4a>

		}
		else if (data == 'r')
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	2b72      	cmp	r3, #114	; 0x72
 800107c:	f47f af4f 	bne.w	8000f1e <main+0x4a>
		{
			HAL_TIM_Base_Stop(&htim1);
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <main+0x1d8>)
 8001082:	f004 fb7a 	bl	800577a <HAL_TIM_Base_Stop>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f003 fa58 	bl	8004544 <HAL_GPIO_WritePin>
  {
 8001094:	e743      	b.n	8000f1e <main+0x4a>
 8001096:	bf00      	nop
 8001098:	08008264 	.word	0x08008264
 800109c:	48000800 	.word	0x48000800
 80010a0:	0800825c 	.word	0x0800825c
 80010a4:	20000198 	.word	0x20000198
 80010a8:	48000400 	.word	0x48000400
 80010ac:	2000022c 	.word	0x2000022c

080010b0 <HAL_TIM_PeriodElapsedCallback>:


  /* USER CODE END 3 */
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d105      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f003 fa53 	bl	8004574 <HAL_GPIO_TogglePin>
  }
 }
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012c00 	.word	0x40012c00

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2238      	movs	r2, #56	; 0x38
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fc26 	bl	800793c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001102:	f003 fa59 	bl	80045b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	2303      	movs	r3, #3
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001118:	2304      	movs	r3, #4
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800111c:	2318      	movs	r3, #24
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fb4f 	bl	80047d4 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800113c:	f000 f9f6 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2303      	movs	r3, #3
 8001146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2102      	movs	r1, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fe4d 	bl	8004df8 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001164:	f000 f9e2 	bl	800152c <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fbd7 	bl	800793c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_ADC1_Init+0xe8>)
 8001190:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <MX_ADC1_Init+0xe8>)
 8001198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <MX_ADC1_Init+0xe8>)
 80011fa:	f000 ff0b 	bl	8002014 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 f992 	bl	800152c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_ADC1_Init+0xe8>)
 8001214:	f002 fbae 	bl	8003974 <HAL_ADCEx_MultiModeConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800121e:	f000 f985 	bl	800152c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_ADC1_Init+0xec>)
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001226:	2306      	movs	r3, #6
 8001228:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	; 0x7f
 8001230:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_ADC1_Init+0xe8>)
 8001240:	f001 fd4e 	bl	8002ce0 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800124a:	f000 f96f 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000098 	.word	0x20000098
 800125c:	04300002 	.word	0x04300002

08001260 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001268:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012a2:	4812      	ldr	r0, [pc, #72]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 80012a4:	f004 ffc2 	bl	800622c <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 f93d 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 80012b6:	f006 fa56 	bl	8007766 <HAL_UARTEx_SetTxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012c0:	f000 f934 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 80012c8:	f006 fa8b 	bl	80077e2 <HAL_UARTEx_SetRxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 f92b 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_LPUART1_UART_Init+0x8c>)
 80012d8:	f006 fa0c 	bl	80076f4 <HAL_UARTEx_DisableFifoMode>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012e2:	f000 f923 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000104 	.word	0x20000104
 80012f0:	40008000 	.word	0x40008000

080012f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_USART1_UART_Init+0x90>)
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <MX_USART1_UART_Init+0x94>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_USART1_UART_Init+0x90>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_USART1_UART_Init+0x90>)
 800133e:	f004 ff75 	bl	800622c <HAL_UART_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001348:	f000 f8f0 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001350:	f006 fa09 	bl	8007766 <HAL_UARTEx_SetTxFifoThreshold>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800135a:	f000 f8e7 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4808      	ldr	r0, [pc, #32]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001362:	f006 fa3e 	bl	80077e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800136c:	f000 f8de 	bl	800152c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_USART1_UART_Init+0x90>)
 8001372:	f006 f9bf 	bl	80076f4 <HAL_UARTEx_DisableFifoMode>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 f8d6 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000198 	.word	0x20000198
 8001388:	40013800 	.word	0x40013800

0800138c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_TIM1_Init+0xa0>)
 80013ac:	4a20      	ldr	r2, [pc, #128]	; (8001430 <MX_TIM1_Init+0xa4>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM1_Init+0xa0>)
 80013b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM1_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM1_Init+0xa0>)
 80013c0:	f640 620f 	movw	r2, #3599	; 0xe0f
 80013c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM1_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_TIM1_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM1_Init+0xa0>)
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM1_Init+0xa0>)
 80013da:	f004 f977 	bl	80056cc <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80013e4:	f000 f8a2 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM1_Init+0xa0>)
 80013f6:	f004 fbaf 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001400:	f000 f894 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM1_Init+0xa0>)
 8001416:	f004 fe2d 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001420:	f000 f884 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000022c 	.word	0x2000022c
 8001430:	40012c00 	.word	0x40012c00

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_GPIO_Init+0xec>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a34      	ldr	r2, [pc, #208]	; (8001520 <MX_GPIO_Init+0xec>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <MX_GPIO_Init+0xec>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <MX_GPIO_Init+0xec>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <MX_GPIO_Init+0xec>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_GPIO_Init+0xec>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MX_GPIO_Init+0xec>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <MX_GPIO_Init+0xec>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_GPIO_Init+0xec>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_GPIO_Init+0xec>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <MX_GPIO_Init+0xec>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_GPIO_Init+0xec>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f003 f846 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014b8:	2200      	movs	r2, #0
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <MX_GPIO_Init+0xf0>)
 80014be:	f003 f841 	bl	8004544 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_GPIO_Init+0xf4>)
 80014d8:	f002 fe9a 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80014dc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f002 fe8a 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014fc:	23ff      	movs	r3, #255	; 0xff
 80014fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0xf0>)
 8001514:	f002 fe7c 	bl	8004210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400
 8001528:	48000800 	.word	0x48000800

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_MspInit+0x84>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_MspInit+0x84>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6613      	str	r3, [r2, #96]	; 0x60
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_MspInit+0x84>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_MspInit+0x84>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_MspInit+0x84>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_MspInit+0x84>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2001      	movs	r0, #1
 8001574:	f002 fbe1 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001578:	2001      	movs	r0, #1
 800157a:	f002 fbf8 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2004      	movs	r0, #4
 8001584:	f002 fbd9 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001588:	2004      	movs	r0, #4
 800158a:	f002 fbf0 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2005      	movs	r0, #5
 8001594:	f002 fbd1 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001598:	2005      	movs	r0, #5
 800159a:	f002 fbe8 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2051      	movs	r0, #81	; 0x51
 80015a4:	f002 fbc9 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80015a8:	2051      	movs	r0, #81	; 0x51
 80015aa:	f002 fbe0 	bl	8003d6e <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ae:	f003 f901 	bl	80047b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09e      	sub	sp, #120	; 0x78
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2254      	movs	r2, #84	; 0x54
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 f9ab 	bl	800793c <memset>
  if(hadc->Instance==ADC1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ee:	d13c      	bne.n	800166a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fe15 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800160c:	f7ff ff8e 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 8001616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_ADC_MspInit+0xb4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001640:	2301      	movs	r3, #1
 8001642:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f002 fddb 	bl	8004210 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2012      	movs	r0, #18
 8001660:	f002 fb6b 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001664:	2012      	movs	r0, #18
 8001666:	f002 fb82 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3778      	adds	r7, #120	; 0x78
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a0      	sub	sp, #128	; 0x80
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	2254      	movs	r2, #84	; 0x54
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f006 f94f 	bl	800793c <memset>
  if(huart->Instance==LPUART1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_UART_MspInit+0x140>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13f      	bne.n	8001728 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016a8:	2320      	movs	r3, #32
 80016aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fdbb 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff ff34 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016c4:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	4a3c      	ldr	r2, [pc, #240]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_UART_MspInit+0x144>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80016f4:	230c      	movs	r3, #12
 80016f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001704:	230c      	movs	r3, #12
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f002 fd7d 	bl	8004210 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	205b      	movs	r0, #91	; 0x5b
 800171c:	f002 fb0d 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001720:	205b      	movs	r0, #91	; 0x5b
 8001722:	f002 fb24 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001726:	e042      	b.n	80017ae <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <HAL_UART_MspInit+0x148>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d13d      	bne.n	80017ae <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fd76 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800174a:	f7ff feef 	bl	800152c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_UART_MspInit+0x144>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <HAL_UART_MspInit+0x144>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_UART_MspInit+0x144>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0x144>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_UART_MspInit+0x144>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_UART_MspInit+0x144>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800177e:	2330      	movs	r3, #48	; 0x30
 8001780:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178e:	2307      	movs	r3, #7
 8001790:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001796:	4619      	mov	r1, r3
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_UART_MspInit+0x14c>)
 800179a:	f002 fd39 	bl	8004210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2025      	movs	r0, #37	; 0x25
 80017a4:	f002 fac9 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a8:	2025      	movs	r0, #37	; 0x25
 80017aa:	f002 fae0 	bl	8003d6e <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3780      	adds	r7, #128	; 0x80
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40008000 	.word	0x40008000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40013800 	.word	0x40013800
 80017c4:	48000800 	.word	0x48000800

080017c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_TIM_Base_MspInit+0x44>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2019      	movs	r0, #25
 80017f8:	f002 fa9f 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017fc:	2019      	movs	r0, #25
 80017fe:	f002 fab6 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40021000 	.word	0x40021000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f90a 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800186c:	f002 ff48 	bl	8004700 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001878:	f002 fb54 	bl	8003f24 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <ADC1_2_IRQHandler+0x10>)
 8001896:	f000 ffa5 	bl	80027e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000098 	.word	0x20000098

080018a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018aa:	f004 f805 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000022c 	.word	0x2000022c

080018b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <USART1_IRQHandler+0x10>)
 80018be:	f004 fe5b 	bl	8006578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000198 	.word	0x20000198

080018cc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <LPUART1_IRQHandler+0x10>)
 80018e2:	f004 fe49 	bl	8006578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000104 	.word	0x20000104

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f006 f814 	bl	800794c <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000278 	.word	0x20000278
 8001958:	200003c8 	.word	0x200003c8

0800195c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001982:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff ffea 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f005 ffd3 	bl	8007958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff fa8f 	bl	8000ed4 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   r0, =_estack
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019c4:	080082f8 	.word	0x080082f8
  ldr r2, =_sbss
 80019c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019cc:	200003c8 	.word	0x200003c8

080019d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC3_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f002 f9a1 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fda0 	bl	8001538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]

}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_InitTick+0x68>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_InitTick+0x68>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 f9ac 	bl	8003d8a <HAL_SYSTICK_Config>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10f      	bne.n	8001a58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d809      	bhi.n	8001a52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	f002 f978 	bl	8003d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_InitTick+0x70>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e004      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e001      	b.n	8001a62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	2000027c 	.word	0x2000027c
 8001a98:	20000008 	.word	0x20000008

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000027c 	.word	0x2000027c

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d004      	beq.n	8001ad8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_Delay+0x40>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad8:	bf00      	nop
 8001ada:	f7ff ffdf 	bl	8001a9c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f7      	bhi.n	8001ada <HAL_Delay+0x26>
  {
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000008 	.word	0x20000008

08001af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LL_ADC_SetOffset+0x44>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	03fff000 	.word	0x03fff000

08001ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3360      	adds	r3, #96	; 0x60
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	; 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3360      	adds	r3, #96	; 0x60
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	615a      	str	r2, [r3, #20]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3330      	adds	r3, #48	; 0x30
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	211f      	movs	r1, #31
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	f003 011f 	and.w	r1, r3, #31
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3314      	adds	r3, #20
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0e5b      	lsrs	r3, r3, #25
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	0d1b      	lsrs	r3, r3, #20
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0d1b      	lsrs	r3, r3, #20
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0318 	and.w	r3, r3, #24
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	0007ffff 	.word	0x0007ffff

08001de0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 031f 	and.w	r3, r3, #31
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_IsEnabled+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_IsEnabled+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsDisableOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsDisableOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	f043 0210 	orr.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d101      	bne.n	8002006 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1a9      	b.n	8002382 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fabf 	bl	80015c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fef1 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fed7 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff0c 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fef0 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002084:	4b9c      	ldr	r3, [pc, #624]	; (80022f8 <HAL_ADC_Init+0x2e4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	4a9c      	ldr	r2, [pc, #624]	; (80022fc <HAL_ADC_Init+0x2e8>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3b01      	subs	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff feee 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff62 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8142 	bne.w	8002370 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 813e 	bne.w	8002370 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fefb 	bl	8001f04 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d141      	bne.n	8002198 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d004      	beq.n	8002128 <HAL_ADC_Init+0x114>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_ADC_Init+0x2ec>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d10f      	bne.n	8002148 <HAL_ADC_Init+0x134>
 8002128:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800212c:	f7ff feea 	bl	8001f04 <LL_ADC_IsEnabled>
 8002130:	4604      	mov	r4, r0
 8002132:	4873      	ldr	r0, [pc, #460]	; (8002300 <HAL_ADC_Init+0x2ec>)
 8002134:	f7ff fee6 	bl	8001f04 <LL_ADC_IsEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	4323      	orrs	r3, r4
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_ADC_Init+0x15a>
 8002148:	486e      	ldr	r0, [pc, #440]	; (8002304 <HAL_ADC_Init+0x2f0>)
 800214a:	f7ff fedb 	bl	8001f04 <LL_ADC_IsEnabled>
 800214e:	4604      	mov	r4, r0
 8002150:	486d      	ldr	r0, [pc, #436]	; (8002308 <HAL_ADC_Init+0x2f4>)
 8002152:	f7ff fed7 	bl	8001f04 <LL_ADC_IsEnabled>
 8002156:	4603      	mov	r3, r0
 8002158:	431c      	orrs	r4, r3
 800215a:	486c      	ldr	r0, [pc, #432]	; (800230c <HAL_ADC_Init+0x2f8>)
 800215c:	f7ff fed2 	bl	8001f04 <LL_ADC_IsEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	4323      	orrs	r3, r4
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d012      	beq.n	8002198 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217a:	d004      	beq.n	8002186 <HAL_ADC_Init+0x172>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5f      	ldr	r2, [pc, #380]	; (8002300 <HAL_ADC_Init+0x2ec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_ADC_Init+0x176>
 8002186:	4a62      	ldr	r2, [pc, #392]	; (8002310 <HAL_ADC_Init+0x2fc>)
 8002188:	e000      	b.n	800218c <HAL_ADC_Init+0x178>
 800218a:	4a62      	ldr	r2, [pc, #392]	; (8002314 <HAL_ADC_Init+0x300>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f7ff fcb0 	bl	8001af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7f5b      	ldrb	r3, [r3, #29]
 800219c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	045b      	lsls	r3, r3, #17
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_ADC_Init+0x304>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fee5 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8002224:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d17f      	bne.n	800232c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d17c      	bne.n	800232c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002236:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800223e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224e:	f023 0302 	bic.w	r3, r3, #2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	430b      	orrs	r3, r1
 800225a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d017      	beq.n	8002294 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002272:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800227c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6911      	ldr	r1, [r2, #16]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	430b      	orrs	r3, r1
 800228e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002292:	e013      	b.n	80022bc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d12a      	bne.n	800231c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022dc:	4311      	orrs	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022e8:	430a      	orrs	r2, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	e019      	b.n	800232c <HAL_ADC_Init+0x318>
 80022f8:	20000000 	.word	0x20000000
 80022fc:	053e2d63 	.word	0x053e2d63
 8002300:	50000100 	.word	0x50000100
 8002304:	50000400 	.word	0x50000400
 8002308:	50000500 	.word	0x50000500
 800230c:	50000600 	.word	0x50000600
 8002310:	50000300 	.word	0x50000300
 8002314:	50000700 	.word	0x50000700
 8002318:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f023 010f 	bic.w	r1, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
 800234c:	e007      	b.n	800235e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020f 	bic.w	r2, r2, #15
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
 800236e:	e007      	b.n	8002380 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002380:	7ffb      	ldrb	r3, [r7, #31]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop

0800238c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_Start+0x1c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a67      	ldr	r2, [pc, #412]	; (8002540 <HAL_ADC_Start+0x1b4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_Start+0x20>
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_ADC_Start+0x1b8>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_Start+0x22>
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_ADC_Start+0x1bc>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fd16 	bl	8001de0 <LL_ADC_GetMultimode>
 80023b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fdf0 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80b4 	bne.w	8002530 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Start+0x4a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0af      	b.n	8002536 <HAL_ADC_Start+0x1aa>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f001 f97a 	bl	80036d8 <ADC_Enable>
 80023e4:	4603      	mov	r3, r0
 80023e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 809b 	bne.w	8002526 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <HAL_ADC_Start+0x1b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_ADC_Start+0x96>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a4e      	ldr	r2, [pc, #312]	; (800254c <HAL_ADC_Start+0x1c0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d002      	beq.n	800241e <HAL_ADC_Start+0x92>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e003      	b.n	8002426 <HAL_ADC_Start+0x9a>
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_ADC_Start+0x1c4>)
 8002420:	e001      	b.n	8002426 <HAL_ADC_Start+0x9a>
 8002422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4293      	cmp	r3, r2
 800242c:	d002      	beq.n	8002434 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d106      	bne.n	800245c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	f023 0206 	bic.w	r2, r3, #6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	661a      	str	r2, [r3, #96]	; 0x60
 800245a:	e002      	b.n	8002462 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	221c      	movs	r2, #28
 8002468:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a32      	ldr	r2, [pc, #200]	; (8002540 <HAL_ADC_Start+0x1b4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_ADC_Start+0x104>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_ADC_Start+0x1c0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start+0x100>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e003      	b.n	8002494 <HAL_ADC_Start+0x108>
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_ADC_Start+0x1c4>)
 800248e:	e001      	b.n	8002494 <HAL_ADC_Start+0x108>
 8002490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	4293      	cmp	r3, r2
 800249a:	d008      	beq.n	80024ae <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d002      	beq.n	80024ae <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d114      	bne.n	80024d8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd3d 	bl	8001f50 <LL_ADC_REG_StartConversion>
 80024d6:	e02d      	b.n	8002534 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <HAL_ADC_Start+0x1b4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_ADC_Start+0x176>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_ADC_Start+0x1c0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d002      	beq.n	80024fe <HAL_ADC_Start+0x172>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	e003      	b.n	8002506 <HAL_ADC_Start+0x17a>
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_ADC_Start+0x1c4>)
 8002500:	e001      	b.n	8002506 <HAL_ADC_Start+0x17a>
 8002502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002506:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800251c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c
 8002524:	e006      	b.n	8002534 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800252e:	e001      	b.n	8002534 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	50000100 	.word	0x50000100
 8002544:	50000300 	.word	0x50000300
 8002548:	50000700 	.word	0x50000700
 800254c:	50000500 	.word	0x50000500
 8002550:	50000400 	.word	0x50000400

08002554 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_Stop+0x16>
 8002566:	2302      	movs	r3, #2
 8002568:	e023      	b.n	80025b2 <HAL_ADC_Stop+0x5e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002572:	2103      	movs	r1, #3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fff3 	bl	8003560 <ADC_ConversionStop>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 f93d 	bl	8003804 <ADC_Disable>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ce:	d004      	beq.n	80025da <HAL_ADC_PollForConversion+0x1e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <HAL_ADC_PollForConversion+0x1f8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_ADC_PollForConversion+0x22>
 80025da:	4b77      	ldr	r3, [pc, #476]	; (80027b8 <HAL_ADC_PollForConversion+0x1fc>)
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_PollForConversion+0x24>
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_ADC_PollForConversion+0x200>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fbfd 	bl	8001de0 <LL_ADC_GetMultimode>
 80025e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d102      	bne.n	80025f6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025f0:	2308      	movs	r3, #8
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e037      	b.n	8002666 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d002      	beq.n	8002608 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d111      	bne.n	800262c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0c1      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002626:	2304      	movs	r3, #4
 8002628:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800262a:	e01c      	b.n	8002666 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002634:	d004      	beq.n	8002640 <HAL_ADC_PollForConversion+0x84>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5e      	ldr	r2, [pc, #376]	; (80027b4 <HAL_ADC_PollForConversion+0x1f8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_ADC_PollForConversion+0x88>
 8002640:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <HAL_ADC_PollForConversion+0x1fc>)
 8002642:	e000      	b.n	8002646 <HAL_ADC_PollForConversion+0x8a>
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_ADC_PollForConversion+0x200>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fbd8 	bl	8001dfc <LL_ADC_GetMultiDMATransfer>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0a3      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002662:	2304      	movs	r3, #4
 8002664:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002666:	f7ff fa19 	bl	8001a9c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800266c:	e021      	b.n	80026b2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d01d      	beq.n	80026b2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002676:	f7ff fa11 	bl	8001a9c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <HAL_ADC_PollForConversion+0xd0>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e07b      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0d6      	beq.n	800266e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fae3 	bl	8001c9c <LL_ADC_REG_IsTriggerSourceSWStart>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7f5b      	ldrb	r3, [r3, #29]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d118      	bne.n	8002716 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d111      	bne.n	8002716 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_ADC_PollForConversion+0x1f8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_ADC_PollForConversion+0x178>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_ADC_PollForConversion+0x204>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d002      	beq.n	8002730 <HAL_ADC_PollForConversion+0x174>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e003      	b.n	8002738 <HAL_ADC_PollForConversion+0x17c>
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_ADC_PollForConversion+0x208>)
 8002732:	e001      	b.n	8002738 <HAL_ADC_PollForConversion+0x17c>
 8002734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4293      	cmp	r3, r2
 800273e:	d008      	beq.n	8002752 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d002      	beq.n	8002752 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d104      	bne.n	800275c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e014      	b.n	8002786 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_ADC_PollForConversion+0x1f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_ADC_PollForConversion+0x1be>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <HAL_ADC_PollForConversion+0x204>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d002      	beq.n	8002776 <HAL_ADC_PollForConversion+0x1ba>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e003      	b.n	800277e <HAL_ADC_PollForConversion+0x1c2>
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_ADC_PollForConversion+0x208>)
 8002778:	e001      	b.n	800277e <HAL_ADC_PollForConversion+0x1c2>
 800277a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800277e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d104      	bne.n	8002796 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e008      	b.n	80027a8 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	220c      	movs	r2, #12
 80027a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	50000100 	.word	0x50000100
 80027b8:	50000300 	.word	0x50000300
 80027bc:	50000700 	.word	0x50000700
 80027c0:	50000500 	.word	0x50000500
 80027c4:	50000400 	.word	0x50000400

080027c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002808:	d004      	beq.n	8002814 <HAL_ADC_IRQHandler+0x30>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8e      	ldr	r2, [pc, #568]	; (8002a48 <HAL_ADC_IRQHandler+0x264>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_ADC_IRQHandler+0x34>
 8002814:	4b8d      	ldr	r3, [pc, #564]	; (8002a4c <HAL_ADC_IRQHandler+0x268>)
 8002816:	e000      	b.n	800281a <HAL_ADC_IRQHandler+0x36>
 8002818:	4b8d      	ldr	r3, [pc, #564]	; (8002a50 <HAL_ADC_IRQHandler+0x26c>)
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fae0 	bl	8001de0 <LL_ADC_GetMultimode>
 8002820:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <HAL_ADC_IRQHandler+0x78>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f001 f885 	bl	800395e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_ADC_IRQHandler+0x8c>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8094 	beq.w	80029a4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 808e 	beq.w	80029a4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff f9f9 	bl	8001c9c <LL_ADC_REG_IsTriggerSourceSWStart>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d072      	beq.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_ADC_IRQHandler+0x264>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_ADC_IRQHandler+0xea>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_ADC_IRQHandler+0x270>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d002      	beq.n	80028ca <HAL_ADC_IRQHandler+0xe6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_IRQHandler+0xee>
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_ADC_IRQHandler+0x274>)
 80028cc:	e001      	b.n	80028d2 <HAL_ADC_IRQHandler+0xee>
 80028ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d008      	beq.n	80028ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d002      	beq.n	80028ec <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	d104      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	e014      	b.n	8002920 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_ADC_IRQHandler+0x264>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_ADC_IRQHandler+0x130>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <HAL_ADC_IRQHandler+0x270>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d002      	beq.n	8002910 <HAL_ADC_IRQHandler+0x12c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e003      	b.n	8002918 <HAL_ADC_IRQHandler+0x134>
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_ADC_IRQHandler+0x274>)
 8002912:	e001      	b.n	8002918 <HAL_ADC_IRQHandler+0x134>
 8002914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002918:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d135      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b08      	cmp	r3, #8
 8002936:	d12e      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb2f 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11a      	bne.n	800297e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020c 	bic.w	r2, r2, #12
 8002956:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d112      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c
 800297c:	e00b      	b.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f984 	bl	8002ca4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	220c      	movs	r2, #12
 80029a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x1d4>
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80b3 	beq.w	8002b2a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80ad 	beq.w	8002b2a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f994 	bl	8001d1a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029f2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f94f 	bl	8001c9c <LL_ADC_REG_IsTriggerSourceSWStart>
 80029fe:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_ADC_IRQHandler+0x264>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x23a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_ADC_IRQHandler+0x270>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d002      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x236>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_IRQHandler+0x23e>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_ADC_IRQHandler+0x274>)
 8002a1c:	e001      	b.n	8002a22 <HAL_ADC_IRQHandler+0x23e>
 8002a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d008      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d002      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	d10f      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	e01f      	b.n	8002a86 <HAL_ADC_IRQHandler+0x2a2>
 8002a46:	bf00      	nop
 8002a48:	50000100 	.word	0x50000100
 8002a4c:	50000300 	.word	0x50000300
 8002a50:	50000700 	.word	0x50000700
 8002a54:	50000500 	.word	0x50000500
 8002a58:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8b      	ldr	r2, [pc, #556]	; (8002c90 <HAL_ADC_IRQHandler+0x4ac>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x296>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a8a      	ldr	r2, [pc, #552]	; (8002c94 <HAL_ADC_IRQHandler+0x4b0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	e003      	b.n	8002a7e <HAL_ADC_IRQHandler+0x29a>
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_ADC_IRQHandler+0x4b4>)
 8002a78:	e001      	b.n	8002a7e <HAL_ADC_IRQHandler+0x29a>
 8002a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a7e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d047      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x2c2>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03f      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d13a      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d133      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d12e      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fa93 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11a      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002adc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d112      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b02:	e00b      	b.n	8002b1c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fef6 	bl	800390e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2260      	movs	r2, #96	; 0x60
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x374>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8b4 	bl	8002cb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x3a4>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fedc 	bl	8003936 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x3d4>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fece 	bl	800394a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d043      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x466>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03e      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e021      	b.n	8002c1e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be8:	d004      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x410>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_ADC_IRQHandler+0x4ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_IRQHandler+0x414>
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_ADC_IRQHandler+0x4b8>)
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_IRQHandler+0x416>
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_ADC_IRQHandler+0x4bc>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f8fe 	bl	8001dfc <LL_ADC_GetMultiDMATransfer>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c06:	2301      	movs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e008      	b.n	8002c1e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10e      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	f043 0202 	orr.w	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f845 	bl	8002ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d018      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x4a2>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d013      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	f043 0208 	orr.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fe4e 	bl	8003922 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c86:	bf00      	nop
 8002c88:	3728      	adds	r7, #40	; 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	50000100 	.word	0x50000100
 8002c94:	50000500 	.word	0x50000500
 8002c98:	50000400 	.word	0x50000400
 8002c9c:	50000300 	.word	0x50000300
 8002ca0:	50000700 	.word	0x50000700

08002ca4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b0b6      	sub	sp, #216	; 0xd8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x24>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f000 bc13 	b.w	800352a <HAL_ADC_ConfigChannel+0x84a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f945 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 83f3 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f7fe ffc9 	bl	8001cc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f933 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002d3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f953 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8002d48:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 81d9 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 81d4 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d68:	d10f      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fe ffe3 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe ff77 	bl	8001c76 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d88:	e00e      	b.n	8002da8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f7fe ffd2 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe ff67 	bl	8001c76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d022      	beq.n	8002e10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dda:	f7fe fec1 	bl	8001b60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6919      	ldr	r1, [r3, #16]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f7fe ff0d 	bl	8001c0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x126>
 8002e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e04:	e000      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x128>
 8002e06:	2300      	movs	r3, #0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7fe ff19 	bl	8001c40 <LL_ADC_SetOffsetSaturation>
 8002e0e:	e17b      	b.n	8003108 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fec6 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x15c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe febb 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	e01e      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x19a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe feb0 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x1b2>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e018      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x1e4>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e004      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d106      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fe7f 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fe63 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x222>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fe58 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	e01e      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x260>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fe4d 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e004      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x278>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	e018      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x2aa>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e004      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d106      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fe1c 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fe00 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x2e8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fdf5 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	e01e      	b.n	8003006 <HAL_ADC_ConfigChannel+0x326>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fdea 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e004      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_ConfigChannel+0x33e>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	e016      	b.n	800304c <HAL_ADC_ConfigChannel+0x36c>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800304c:	429a      	cmp	r2, r3
 800304e:	d106      	bne.n	800305e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fdbb 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2103      	movs	r1, #3
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fd9f 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_ADC_ConfigChannel+0x3aa>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2103      	movs	r1, #3
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fd94 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	e017      	b.n	80030ba <HAL_ADC_ConfigChannel+0x3da>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2103      	movs	r1, #3
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fd89 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80030b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x3f2>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	e011      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x416>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d106      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fd66 	bl	8001bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fef9 	bl	8001f04 <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 813d 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	461a      	mov	r2, r3
 8003128:	f7fe fe36 	bl	8001d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4aa2      	ldr	r2, [pc, #648]	; (80033bc <HAL_ADC_ConfigChannel+0x6dc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	f040 812e 	bne.w	8003394 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x480>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	3301      	adds	r3, #1
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2b09      	cmp	r3, #9
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e019      	b.n	8003194 <HAL_ADC_ConfigChannel+0x4b4>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800316e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003170:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e003      	b.n	8003184 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800317c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2b09      	cmp	r3, #9
 800318c:	bf94      	ite	ls
 800318e:	2301      	movls	r3, #1
 8003190:	2300      	movhi	r3, #0
 8003192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003194:	2b00      	cmp	r3, #0
 8003196:	d079      	beq.n	800328c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x4d4>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	3301      	adds	r3, #1
 80031ac:	069b      	lsls	r3, r3, #26
 80031ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b2:	e015      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x500>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e003      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x520>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	e017      	b.n	8003230 <HAL_ADC_ConfigChannel+0x550>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800320e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800321c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x576>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	3301      	adds	r3, #1
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	051b      	lsls	r3, r3, #20
 8003254:	e018      	b.n	8003288 <HAL_ADC_ConfigChannel+0x5a8>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800326e:	2320      	movs	r3, #32
 8003270:	e003      	b.n	800327a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003288:	430b      	orrs	r3, r1
 800328a:	e07e      	b.n	800338a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	2b00      	cmp	r3, #0
 8003296:	d107      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x5c8>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	3301      	adds	r3, #1
 80032a0:	069b      	lsls	r3, r3, #26
 80032a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a6:	e015      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x5f4>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80032c0:	2320      	movs	r3, #32
 80032c2:	e003      	b.n	80032cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	069b      	lsls	r3, r3, #26
 80032d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x614>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	3301      	adds	r3, #1
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	e017      	b.n	8003324 <HAL_ADC_ConfigChannel+0x644>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	61fb      	str	r3, [r7, #28]
  return result;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	ea42 0103 	orr.w	r1, r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x670>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	3301      	adds	r3, #1
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	3b1e      	subs	r3, #30
 8003348:	051b      	lsls	r3, r3, #20
 800334a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800334e:	e01b      	b.n	8003388 <HAL_ADC_ConfigChannel+0x6a8>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	613b      	str	r3, [r7, #16]
  return result;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e003      	b.n	8003374 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	3b1e      	subs	r3, #30
 8003382:	051b      	lsls	r3, r3, #20
 8003384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003388:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338e:	4619      	mov	r1, r3
 8003390:	f7fe fcd6 	bl	8001d40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80be 	beq.w	800351e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033aa:	d004      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x6d6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10a      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x6ec>
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80033b8:	e009      	b.n	80033ce <HAL_ADC_ConfigChannel+0x6ee>
 80033ba:	bf00      	nop
 80033bc:	407f0000 	.word	0x407f0000
 80033c0:	80080000 	.word	0x80080000
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000300 	.word	0x50000300
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_ADC_ConfigChannel+0x854>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fbb8 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 80033d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_ADC_ConfigChannel+0x858>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x70c>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a55      	ldr	r2, [pc, #340]	; (800353c <HAL_ADC_ConfigChannel+0x85c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d13a      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d134      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d005      	beq.n	800340e <HAL_ADC_ConfigChannel+0x72e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4e      	ldr	r2, [pc, #312]	; (8003540 <HAL_ADC_ConfigChannel+0x860>)
 8003408:	4293      	cmp	r3, r2
 800340a:	f040 8085 	bne.w	8003518 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003416:	d004      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x742>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a49      	ldr	r2, [pc, #292]	; (8003544 <HAL_ADC_ConfigChannel+0x864>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x746>
 8003422:	4a49      	ldr	r2, [pc, #292]	; (8003548 <HAL_ADC_ConfigChannel+0x868>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_ConfigChannel+0x748>
 8003426:	4a43      	ldr	r2, [pc, #268]	; (8003534 <HAL_ADC_ConfigChannel+0x854>)
 8003428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800342c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7fe fb73 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003438:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_ADC_ConfigChannel+0x86c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4a44      	ldr	r2, [pc, #272]	; (8003550 <HAL_ADC_ConfigChannel+0x870>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003452:	e002      	b.n	800345a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3b01      	subs	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003460:	e05a      	b.n	8003518 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_ADC_ConfigChannel+0x874>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d125      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800346c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11f      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a31      	ldr	r2, [pc, #196]	; (8003544 <HAL_ADC_ConfigChannel+0x864>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d104      	bne.n	800348c <HAL_ADC_ConfigChannel+0x7ac>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_ADC_ConfigChannel+0x878>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d047      	beq.n	800351c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x7c0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2a      	ldr	r2, [pc, #168]	; (8003544 <HAL_ADC_ConfigChannel+0x864>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x7c4>
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <HAL_ADC_ConfigChannel+0x868>)
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x7c6>
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_ADC_ConfigChannel+0x854>)
 80034a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7fe fb34 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b6:	e031      	b.n	800351c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_ADC_ConfigChannel+0x87c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d12d      	bne.n	800351e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d127      	bne.n	800351e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_ADC_ConfigChannel+0x864>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e0:	d004      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x80c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_ADC_ConfigChannel+0x864>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x810>
 80034ec:	4a16      	ldr	r2, [pc, #88]	; (8003548 <HAL_ADC_ConfigChannel+0x868>)
 80034ee:	e000      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x812>
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <HAL_ADC_ConfigChannel+0x854>)
 80034f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7fe fb0e 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
 8003502:	e00c      	b.n	800351e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003516:	e002      	b.n	800351e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003526:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800352a:	4618      	mov	r0, r3
 800352c:	37d8      	adds	r7, #216	; 0xd8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	50000700 	.word	0x50000700
 8003538:	c3210000 	.word	0xc3210000
 800353c:	90c00010 	.word	0x90c00010
 8003540:	50000600 	.word	0x50000600
 8003544:	50000100 	.word	0x50000100
 8003548:	50000300 	.word	0x50000300
 800354c:	20000000 	.word	0x20000000
 8003550:	053e2d63 	.word	0x053e2d63
 8003554:	c7520000 	.word	0xc7520000
 8003558:	50000500 	.word	0x50000500
 800355c:	cb840000 	.word	0xcb840000

08003560 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fd12 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 800357c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fd33 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8003588:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8098 	beq.w	80036c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7f5b      	ldrb	r3, [r3, #29]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d126      	bne.n	80035fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7f1b      	ldrb	r3, [r3, #28]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d122      	bne.n	80035fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ba:	e014      	b.n	80035e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4a45      	ldr	r2, [pc, #276]	; (80036d4 <ADC_ConversionStop+0x174>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d90d      	bls.n	80035e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e074      	b.n	80036ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d1e3      	bne.n	80035bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d014      	beq.n	800362c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fcca 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fc87 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fca6 	bl	8001f78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d014      	beq.n	800365c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fcd9 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fc6f 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fcb5 	bl	8001fc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <ADC_ConversionStop+0x10e>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d105      	bne.n	8003674 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003668:	230c      	movs	r3, #12
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	e005      	b.n	800367a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800366e:	2308      	movs	r3, #8
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e002      	b.n	800367a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003674:	2304      	movs	r3, #4
 8003676:	617b      	str	r3, [r7, #20]
        break;
 8003678:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800367a:	f7fe fa0f 	bl	8001a9c <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003680:	e01b      	b.n	80036ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003682:	f7fe fa0b 	bl	8001a9c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d914      	bls.n	80036ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1dc      	bne.n	8003682 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	a33fffff 	.word	0xa33fffff

080036d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fc0b 	bl	8001f04 <LL_ADC_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d176      	bne.n	80037e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <ADC_Enable+0x114>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e062      	b.n	80037e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fbc6 	bl	8001eb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003730:	d004      	beq.n	800373c <ADC_Enable+0x64>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <ADC_Enable+0x118>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <ADC_Enable+0x68>
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <ADC_Enable+0x11c>)
 800373e:	e000      	b.n	8003742 <ADC_Enable+0x6a>
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <ADC_Enable+0x120>)
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f9fe 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 8003748:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800374a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800374e:	2b00      	cmp	r3, #0
 8003750:	d013      	beq.n	800377a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <ADC_Enable+0x124>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <ADC_Enable+0x128>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800376c:	e002      	b.n	8003774 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3b01      	subs	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f9      	bne.n	800376e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800377a:	f7fe f98f 	bl	8001a9c <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003780:	e028      	b.n	80037d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fbbc 	bl	8001f04 <LL_ADC_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fb8c 	bl	8001eb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800379c:	f7fe f97e 	bl	8001a9c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d914      	bls.n	80037d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d00d      	beq.n	80037d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	f043 0210 	orr.w	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e007      	b.n	80037e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d1cf      	bne.n	8003782 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	8000003f 	.word	0x8000003f
 80037f0:	50000100 	.word	0x50000100
 80037f4:	50000300 	.word	0x50000300
 80037f8:	50000700 	.word	0x50000700
 80037fc:	20000000 	.word	0x20000000
 8003800:	053e2d63 	.word	0x053e2d63

08003804 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fb8a 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 8003816:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fb71 	bl	8001f04 <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d047      	beq.n	80038b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d144      	bne.n	80038b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030d 	and.w	r3, r3, #13
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10c      	bne.n	8003856 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fb4b 	bl	8001edc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2203      	movs	r2, #3
 800384c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800384e:	f7fe f925 	bl	8001a9c <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003854:	e029      	b.n	80038aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e023      	b.n	80038ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003872:	f7fe f913 	bl	8001a9c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d914      	bls.n	80038aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	f043 0210 	orr.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389e:	f043 0201 	orr.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1dc      	bne.n	8003872 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <LL_ADC_IsEnabled>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <LL_ADC_IsEnabled+0x18>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_ADC_IsEnabled+0x1a>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_REG_IsConversionOngoing>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d101      	bne.n	8003900 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b0a1      	sub	sp, #132	; 0x84
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800398e:	2302      	movs	r3, #2
 8003990:	e0e7      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800399a:	2300      	movs	r3, #0
 800399c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800399e:	2300      	movs	r3, #0
 80039a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039aa:	d102      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	e009      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d102      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039bc:	4b6d      	ldr	r3, [pc, #436]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e001      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0be      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff7e 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 80039ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff78 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80a0 	bne.w	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 809c 	bne.w	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a10:	d004      	beq.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a55      	ldr	r2, [pc, #340]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a1e:	e000      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d04b      	beq.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a3e:	035b      	lsls	r3, r3, #13
 8003a40:	430b      	orrs	r3, r1
 8003a42:	431a      	orrs	r2, r3
 8003a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a45      	ldr	r2, [pc, #276]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d10f      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a60:	f7ff ff2f 	bl	80038c2 <LL_ADC_IsEnabled>
 8003a64:	4604      	mov	r4, r0
 8003a66:	4841      	ldr	r0, [pc, #260]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a68:	f7ff ff2b 	bl	80038c2 <LL_ADC_IsEnabled>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4323      	orrs	r3, r4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e012      	b.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a7c:	483c      	ldr	r0, [pc, #240]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a7e:	f7ff ff20 	bl	80038c2 <LL_ADC_IsEnabled>
 8003a82:	4604      	mov	r4, r0
 8003a84:	483b      	ldr	r0, [pc, #236]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a86:	f7ff ff1c 	bl	80038c2 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	431c      	orrs	r4, r3
 8003a8e:	483c      	ldr	r0, [pc, #240]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a90:	f7ff ff17 	bl	80038c2 <LL_ADC_IsEnabled>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4323      	orrs	r3, r4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d056      	beq.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aae:	f023 030f 	bic.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6811      	ldr	r1, [r2, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	6892      	ldr	r2, [r2, #8]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac2:	e047      	b.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ace:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad8:	d004      	beq.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10f      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ae4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ae8:	f7ff feeb 	bl	80038c2 <LL_ADC_IsEnabled>
 8003aec:	4604      	mov	r4, r0
 8003aee:	481f      	ldr	r0, [pc, #124]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af0:	f7ff fee7 	bl	80038c2 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e012      	b.n	8003b2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b04:	481a      	ldr	r0, [pc, #104]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b06:	f7ff fedc 	bl	80038c2 <LL_ADC_IsEnabled>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4819      	ldr	r0, [pc, #100]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b0e:	f7ff fed8 	bl	80038c2 <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	431c      	orrs	r4, r3
 8003b16:	481a      	ldr	r0, [pc, #104]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b18:	f7ff fed3 	bl	80038c2 <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b36:	f023 030f 	bic.w	r3, r3, #15
 8003b3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3e:	e009      	b.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b52:	e000      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3784      	adds	r7, #132	; 0x84
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	50000100 	.word	0x50000100
 8003b70:	50000400 	.word	0x50000400
 8003b74:	50000500 	.word	0x50000500
 8003b78:	50000300 	.word	0x50000300
 8003b7c:	50000700 	.word	0x50000700
 8003b80:	50000600 	.word	0x50000600

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4907      	ldr	r1, [pc, #28]	; (8003c20 <__NVIC_EnableIRQ+0x38>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db0a      	blt.n	8003c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	490c      	ldr	r1, [pc, #48]	; (8003c70 <__NVIC_SetPriority+0x4c>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c4c:	e00a      	b.n	8003c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <__NVIC_SetPriority+0x50>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	440b      	add	r3, r1
 8003c62:	761a      	strb	r2, [r3, #24]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf28      	it	cs
 8003c96:	2304      	movcs	r3, #4
 8003c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d902      	bls.n	8003ca8 <NVIC_EncodePriority+0x30>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3b03      	subs	r3, #3
 8003ca6:	e000      	b.n	8003caa <NVIC_EncodePriority+0x32>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	43d9      	mvns	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	4313      	orrs	r3, r2
         );
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf0:	d301      	bcc.n	8003cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00f      	b.n	8003d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <SysTick_Config+0x40>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cfe:	210f      	movs	r1, #15
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	f7ff ff8e 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SysTick_Config+0x40>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SysTick_Config+0x40>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010

08003d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff29 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d48:	f7ff ff40 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff90 	bl	8003c78 <NVIC_EncodePriority>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff5f 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff33 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ffa4 	bl	8003ce0 <SysTick_Config>
 8003d98:	4603      	mov	r3, r0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d005      	beq.n	8003dc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e037      	b.n	8003e36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 020e 	bic.w	r2, r2, #14
 8003dd4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e047      	b.n	8003f18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 020e 	bic.w	r2, r2, #14
 8003e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ed4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
    }
  }
  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003f2a:	4b66      	ldr	r3, [pc, #408]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4a65      	ldr	r2, [pc, #404]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f30:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f34:	f023 0303 	bic.w	r3, r3, #3
 8003f38:	6153      	str	r3, [r2, #20]
#if defined (FLASH_OPTR_DBANK)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003f3a:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f44:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003f46:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d105      	bne.n	8003f5c <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f50:	4b5c      	ldr	r3, [pc, #368]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4a5b      	ldr	r2, [pc, #364]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003f5c:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d041      	beq.n	8003ff2 <HAL_FLASH_IRQHandler+0xce>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003f6e:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	4a54      	ldr	r2, [pc, #336]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003f78:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_FLASH_IRQHandler+0x70>
 8003f84:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f8e:	494d      	ldr	r1, [pc, #308]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	618b      	str	r3, [r1, #24]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_FLASH_IRQHandler+0x84>
 8003f9e:	4a49      	ldr	r2, [pc, #292]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fa6:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003fa8:	f000 f8e8 	bl	800417c <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fae:	7a1b      	ldrb	r3, [r3, #8]
 8003fb0:	72fb      	strb	r3, [r7, #11]
    if (procedure == FLASH_PROC_PAGE_ERASE)
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_FLASH_IRQHandler+0xa0>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f88f 	bl	80040e0 <HAL_FLASH_OperationErrorCallback>
 8003fc2:	e013      	b.n	8003fec <HAL_FLASH_IRQHandler+0xc8>
    }
    else if (procedure == FLASH_PROC_MASS_ERASE)
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <HAL_FLASH_IRQHandler+0xb2>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003fca:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f886 	bl	80040e0 <HAL_FLASH_OperationErrorCallback>
 8003fd4:	e00a      	b.n	8003fec <HAL_FLASH_IRQHandler+0xc8>
    }
    else if ((procedure == FLASH_PROC_PROGRAM) ||
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d002      	beq.n	8003fe2 <HAL_FLASH_IRQHandler+0xbe>
 8003fdc:	7afb      	ldrb	r3, [r7, #11]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d104      	bne.n	8003fec <HAL_FLASH_IRQHandler+0xc8>
             (procedure == FLASH_PROC_PROGRAM_LAST))
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f87a 	bl	80040e0 <HAL_FLASH_OperationErrorCallback>
    {
      /* Nothing to do */
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d14f      	bne.n	800409e <HAL_FLASH_IRQHandler+0x17a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 8004000:	2201      	movs	r2, #1
 8004002:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8004004:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004006:	7a1b      	ldrb	r3, [r3, #8]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d12b      	bne.n	8004066 <HAL_FLASH_IRQHandler+0x142>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800400e:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004016:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_FLASH_IRQHandler+0x124>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f851 	bl	80040cc <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	3301      	adds	r3, #1
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004032:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 800403a:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f857 	bl	80040f4 <FLASH_PageErase>
 8004046:	e02a      	b.n	800409e <HAL_FLASH_IRQHandler+0x17a>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8004048:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800404a:	f04f 32ff 	mov.w	r2, #4294967295
 800404e:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004052:	2200      	movs	r2, #0
 8004054:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8004056:	f000 f891 	bl	800417c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f834 	bl	80040cc <HAL_FLASH_EndOfOperationCallback>
 8004064:	e01b      	b.n	800409e <HAL_FLASH_IRQHandler+0x17a>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches();
 8004066:	f000 f889 	bl	800417c <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800406c:	7a1b      	ldrb	r3, [r3, #8]
 800406e:	72fb      	strb	r3, [r7, #11]
      if (procedure == FLASH_PROC_MASS_ERASE)
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d105      	bne.n	8004082 <HAL_FLASH_IRQHandler+0x15e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f826 	bl	80040cc <HAL_FLASH_EndOfOperationCallback>
 8004080:	e00a      	b.n	8004098 <HAL_FLASH_IRQHandler+0x174>
      }
      else if ((procedure == FLASH_PROC_PROGRAM) ||
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d002      	beq.n	800408e <HAL_FLASH_IRQHandler+0x16a>
 8004088:	7afb      	ldrb	r3, [r7, #11]
 800408a:	2b04      	cmp	r3, #4
 800408c:	d104      	bne.n	8004098 <HAL_FLASH_IRQHandler+0x174>
               (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f81a 	bl	80040cc <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 800409a:	2200      	movs	r2, #0
 800409c:	721a      	strb	r2, [r3, #8]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 80040a0:	7a1b      	ldrb	r3, [r3, #8]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <HAL_FLASH_IRQHandler+0x196>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <HAL_FLASH_IRQHandler+0x1a0>)
 80040ae:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80040b2:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_FLASH_IRQHandler+0x1a4>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
  }
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40022000 	.word	0x40022000
 80040c8:	2000000c 	.word	0x2000000c

080040cc <HAL_FLASH_EndOfOperationCallback>:
  *                            (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_FLASH_OperationErrorCallback>:
  *           @arg Page Erase: Page number which returned an error
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <FLASH_PageErase+0x84>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <FLASH_PageErase+0x84>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <FLASH_PageErase+0x84>)
 8004110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004114:	6153      	str	r3, [r2, #20]
 8004116:	e011      	b.n	800413c <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <FLASH_PageErase+0x84>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <FLASH_PageErase+0x84>)
 8004128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412c:	6153      	str	r3, [r2, #20]
 800412e:	e005      	b.n	800413c <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <FLASH_PageErase+0x84>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	4a10      	ldr	r2, [pc, #64]	; (8004178 <FLASH_PageErase+0x84>)
 8004136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800413a:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <FLASH_PageErase+0x84>)
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800414c:	490a      	ldr	r1, [pc, #40]	; (8004178 <FLASH_PageErase+0x84>)
 800414e:	4313      	orrs	r3, r2
 8004150:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <FLASH_PageErase+0x84>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <FLASH_PageErase+0x84>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <FLASH_PageErase+0x84>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <FLASH_PageErase+0x84>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	6153      	str	r3, [r2, #20]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000

0800417c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <FLASH_FlushCaches+0x8c>)
 8004184:	7f1b      	ldrb	r3, [r3, #28]
 8004186:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d002      	beq.n	8004194 <FLASH_FlushCaches+0x18>
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d117      	bne.n	80041c4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <FLASH_FlushCaches+0x90>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <FLASH_FlushCaches+0x90>)
 800419a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <FLASH_FlushCaches+0x90>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <FLASH_FlushCaches+0x90>)
 80041a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <FLASH_FlushCaches+0x90>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a16      	ldr	r2, [pc, #88]	; (800420c <FLASH_FlushCaches+0x90>)
 80041b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <FLASH_FlushCaches+0x90>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <FLASH_FlushCaches+0x90>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d002      	beq.n	80041d0 <FLASH_FlushCaches+0x54>
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d111      	bne.n	80041f4 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <FLASH_FlushCaches+0x90>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <FLASH_FlushCaches+0x90>)
 80041d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <FLASH_FlushCaches+0x90>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <FLASH_FlushCaches+0x90>)
 80041e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <FLASH_FlushCaches+0x90>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a07      	ldr	r2, [pc, #28]	; (800420c <FLASH_FlushCaches+0x90>)
 80041ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <FLASH_FlushCaches+0x8c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000000c 	.word	0x2000000c
 800420c:	40022000 	.word	0x40022000

08004210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800421e:	e15a      	b.n	80044d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2101      	movs	r1, #1
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 814c 	beq.w	80044d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d005      	beq.n	8004250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800424c:	2b02      	cmp	r3, #2
 800424e:	d130      	bne.n	80042b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004286:	2201      	movs	r2, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 0201 	and.w	r2, r3, #1
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d017      	beq.n	80042ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d123      	bne.n	8004342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3208      	adds	r2, #8
 800433c:	6939      	ldr	r1, [r7, #16]
 800433e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0203 	and.w	r2, r3, #3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a6 	beq.w	80044d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6613      	str	r3, [r2, #96]	; 0x60
 8004390:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <HAL_GPIO_Init+0x2e4>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439c:	4a56      	ldr	r2, [pc, #344]	; (80044f8 <HAL_GPIO_Init+0x2e8>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3302      	adds	r3, #2
 80043a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	220f      	movs	r2, #15
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043c6:	d01f      	beq.n	8004408 <HAL_GPIO_Init+0x1f8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <HAL_GPIO_Init+0x2ec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d019      	beq.n	8004404 <HAL_GPIO_Init+0x1f4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_GPIO_Init+0x2f0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_GPIO_Init+0x1f0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_GPIO_Init+0x2f4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00d      	beq.n	80043fc <HAL_GPIO_Init+0x1ec>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_GPIO_Init+0x2f8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <HAL_GPIO_Init+0x1e8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a48      	ldr	r2, [pc, #288]	; (800450c <HAL_GPIO_Init+0x2fc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_GPIO_Init+0x1e4>
 80043f0:	2305      	movs	r3, #5
 80043f2:	e00a      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043f4:	2306      	movs	r3, #6
 80043f6:	e008      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e006      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 80043fc:	2303      	movs	r3, #3
 80043fe:	e004      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004400:	2302      	movs	r3, #2
 8004402:	e002      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_GPIO_Init+0x1fa>
 8004408:	2300      	movs	r3, #0
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	f002 0203 	and.w	r2, r2, #3
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	4093      	lsls	r3, r2
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800441a:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_GPIO_Init+0x2e8>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_GPIO_Init+0x300>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <HAL_GPIO_Init+0x300>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_GPIO_Init+0x300>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004476:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x300>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_GPIO_Init+0x300>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ca:	4a11      	ldr	r2, [pc, #68]	; (8004510 <HAL_GPIO_Init+0x300>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f ae9d 	bne.w	8004220 <HAL_GPIO_Init+0x10>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40010000 	.word	0x40010000
 80044fc:	48000400 	.word	0x48000400
 8004500:	48000800 	.word	0x48000800
 8004504:	48000c00 	.word	0x48000c00
 8004508:	48001000 	.word	0x48001000
 800450c:	48001400 	.word	0x48001400
 8004510:	40010400 	.word	0x40010400

08004514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004560:	e002      	b.n	8004568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43d9      	mvns	r1, r3
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	400b      	ands	r3, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d141      	bne.n	800464a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045c6:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d131      	bne.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d4:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045da:	4a46      	ldr	r2, [pc, #280]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ec:	4a41      	ldr	r2, [pc, #260]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2232      	movs	r2, #50	; 0x32
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a3f      	ldr	r2, [pc, #252]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0c9b      	lsrs	r3, r3, #18
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460a:	e002      	b.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d102      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f2      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d158      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e057      	b.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004638:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463e:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004648:	e04d      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004650:	d141      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004652:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d131      	bne.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004666:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2232      	movs	r2, #50	; 0x32
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0c9b      	lsrs	r3, r3, #18
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004696:	e002      	b.n	800469e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d102      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f2      	bne.n	8004698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046be:	d112      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e011      	b.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046d4:	e007      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40007000 	.word	0x40007000
 80046f8:	20000000 	.word	0x20000000
 80046fc:	431bde83 	.word	0x431bde83

08004700 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004710:	f7ff ff4a 	bl	80045a8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800471a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004728:	f000 f828 	bl	800477c <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800472e:	2208      	movs	r2, #8
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800473e:	f000 f824 	bl	800478a <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004744:	2210      	movs	r2, #16
 8004746:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004754:	f000 f820 	bl	8004798 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800475a:	2220      	movs	r2, #32
 800475c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800476a:	f000 f81c 	bl	80047a6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800476e:	4b02      	ldr	r3, [pc, #8]	; (8004778 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40010400 	.word	0x40010400

0800477c <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c2:	6093      	str	r3, [r2, #8]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e2fe      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d075      	beq.n	80048de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f2:	4b97      	ldr	r3, [pc, #604]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fc:	4b94      	ldr	r3, [pc, #592]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d102      	bne.n	8004812 <HAL_RCC_OscConfig+0x3e>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d002      	beq.n	8004818 <HAL_RCC_OscConfig+0x44>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d10b      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	4b8d      	ldr	r3, [pc, #564]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05b      	beq.n	80048dc <HAL_RCC_OscConfig+0x108>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d157      	bne.n	80048dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e2d9      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x74>
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a84      	ldr	r2, [pc, #528]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b7f      	ldr	r3, [pc, #508]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7e      	ldr	r2, [pc, #504]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b7c      	ldr	r3, [pc, #496]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7b      	ldr	r2, [pc, #492]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 800486c:	4b78      	ldr	r3, [pc, #480]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a77      	ldr	r2, [pc, #476]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b75      	ldr	r3, [pc, #468]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a74      	ldr	r2, [pc, #464]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd f906 	bl	8001a9c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fd f902 	bl	8001a9c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e29e      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xc0>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd f8f2 	bl	8001a9c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd f8ee 	bl	8001a9c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e28a      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	4b60      	ldr	r3, [pc, #384]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0xe8>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b56      	ldr	r3, [pc, #344]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d102      	bne.n	800490a <HAL_RCC_OscConfig+0x136>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <HAL_RCC_OscConfig+0x13c>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11f      	bne.n	8004950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x154>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e25d      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	4946      	ldr	r1, [pc, #280]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800493c:	4b45      	ldr	r3, [pc, #276]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fd f85f 	bl	8001a04 <HAL_InitTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d043      	beq.n	80049d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e249      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d023      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3c      	ldr	r2, [pc, #240]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd f89a 	bl	8001a9c <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496c:	f7fd f896 	bl	8001a9c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e232      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497e:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	492d      	ldr	r1, [pc, #180]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
 800499e:	e01a      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd f876 	bl	8001a9c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fd f872 	bl	8001a9c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e20e      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1e0>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d041      	beq.n	8004a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7fd f84f 	bl	8001a9c <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fd f84b 	bl	8001a9c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1e7      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ef      	beq.n	8004a02 <HAL_RCC_OscConfig+0x22e>
 8004a22:	e020      	b.n	8004a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_OscConfig+0x27c>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd f832 	bl	8001a9c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a3a:	e00d      	b.n	8004a58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fd f82e 	bl	8001a9c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d906      	bls.n	8004a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e1ca      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a58:	4b8c      	ldr	r3, [pc, #560]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ea      	bne.n	8004a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80a6 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a78:	4b84      	ldr	r3, [pc, #528]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2b4>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x2b6>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	4b7f      	ldr	r3, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	4a7e      	ldr	r2, [pc, #504]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9a:	4b7c      	ldr	r3, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <HAL_RCC_OscConfig+0x4bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d118      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x4bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x4bc>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7fc ffeb 	bl	8001a9c <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fc ffe7 	bl	8001a9c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e183      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004adc:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x4bc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d108      	bne.n	8004b02 <HAL_RCC_OscConfig+0x32e>
 8004af0:	4b66      	ldr	r3, [pc, #408]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	e024      	b.n	8004b4c <HAL_RCC_OscConfig+0x378>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d110      	bne.n	8004b2c <HAL_RCC_OscConfig+0x358>
 8004b0a:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	4a5a      	ldr	r2, [pc, #360]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCC_OscConfig+0x378>
 8004b2c:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a56      	ldr	r2, [pc, #344]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d016      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fc ffa2 	bl	8001a9c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5c:	f7fc ff9e 	bl	8001a9c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e138      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ed      	beq.n	8004b5c <HAL_RCC_OscConfig+0x388>
 8004b80:	e015      	b.n	8004bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7fc ff8b 	bl	8001a9c <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fc ff87 	bl	8001a9c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e121      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ed      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	4a34      	ldr	r2, [pc, #208]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bda:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fc ff5a 	bl	8001a9c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bec:	f7fc ff56 	bl	8001a9c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0f2      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bfe:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ef      	beq.n	8004bec <HAL_RCC_OscConfig+0x418>
 8004c0c:	e01b      	b.n	8004c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fc ff3d 	bl	8001a9c <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c26:	f7fc ff39 	bl	8001a9c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0d5      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ef      	bne.n	8004c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80c9 	beq.w	8004de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	f000 8083 	beq.w	8004d64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d15e      	bne.n	8004d24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fc ff13 	bl	8001a9c <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e00c      	b.n	8004c94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fc ff0f 	bl	8001a9c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d905      	bls.n	8004c94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0ab      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c94:	4b55      	ldr	r3, [pc, #340]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ec      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca0:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b52      	ldr	r3, [pc, #328]	; (8004df0 <HAL_RCC_OscConfig+0x61c>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6a11      	ldr	r1, [r2, #32]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cba:	0212      	lsls	r2, r2, #8
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cc2:	0852      	lsrs	r2, r2, #1
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	0552      	lsls	r2, r2, #21
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cce:	0852      	lsrs	r2, r2, #1
 8004cd0:	3a01      	subs	r2, #1
 8004cd2:	0652      	lsls	r2, r2, #25
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cda:	06d2      	lsls	r2, r2, #27
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	4943      	ldr	r1, [pc, #268]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a40      	ldr	r2, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a3d      	ldr	r2, [pc, #244]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fece 	bl	8001a9c <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fc feca 	bl	8001a9c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e066      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x530>
 8004d22:	e05e      	b.n	8004de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fc feb4 	bl	8001a9c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fc feb0 	bl	8001a9c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e04c      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d56:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	4924      	ldr	r1, [pc, #144]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <HAL_RCC_OscConfig+0x620>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	60cb      	str	r3, [r1, #12]
 8004d62:	e03e      	b.n	8004de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e039      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x618>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0203 	and.w	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d12c      	bne.n	8004dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d123      	bne.n	8004dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d11b      	bne.n	8004dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d113      	bne.n	8004dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	019f800c 	.word	0x019f800c
 8004df4:	feeefffc 	.word	0xfeeefffc

08004df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e11e      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b91      	ldr	r3, [pc, #580]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d910      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b8e      	ldr	r3, [pc, #568]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 020f 	bic.w	r2, r3, #15
 8004e26:	498c      	ldr	r1, [pc, #560]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e106      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d073      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d129      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e54:	4b81      	ldr	r3, [pc, #516]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0f4      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e64:	f000 f99e 	bl	80051a4 <RCC_GetSysClockFreqFromPLLSource>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCC_ClockConfig+0x268>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d93f      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e72:	4b7a      	ldr	r3, [pc, #488]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d033      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d12f      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e92:	4b72      	ldr	r3, [pc, #456]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9a:	4a70      	ldr	r2, [pc, #448]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e024      	b.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0c6      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec0:	4b66      	ldr	r3, [pc, #408]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e0be      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ed0:	f000 f8ce 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4a61      	ldr	r2, [pc, #388]	; (8005060 <HAL_RCC_ClockConfig+0x268>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d909      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ede:	4b5f      	ldr	r3, [pc, #380]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee6:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef2:	4b5a      	ldr	r3, [pc, #360]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f023 0203 	bic.w	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4957      	ldr	r1, [pc, #348]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc fdca 	bl	8001a9c <HAL_GetTick>
 8004f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0c:	f7fc fdc6 	bl	8001a9c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e095      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	4b4e      	ldr	r3, [pc, #312]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 020c 	and.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d1eb      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d023      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f4c:	4b43      	ldr	r3, [pc, #268]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a42      	ldr	r2, [pc, #264]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f64:	4b3d      	ldr	r3, [pc, #244]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f6c:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4936      	ldr	r1, [pc, #216]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d105      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f8e:	4b33      	ldr	r3, [pc, #204]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4a32      	ldr	r2, [pc, #200]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d21d      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 020f 	bic.w	r2, r3, #15
 8004fb0:	4929      	ldr	r1, [pc, #164]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fb8:	f7fc fd70 	bl	8001a9c <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fc fd6c 	bl	8001a9c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e03b      	b.n	800504e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_RCC_ClockConfig+0x260>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1ed      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4917      	ldr	r1, [pc, #92]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	490f      	ldr	r1, [pc, #60]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005022:	f000 f825 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_RCC_ClockConfig+0x264>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490c      	ldr	r1, [pc, #48]	; (8005064 <HAL_RCC_ClockConfig+0x26c>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <HAL_RCC_ClockConfig+0x270>)
 8005040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_ClockConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7fc fcdc 	bl	8001a04 <HAL_InitTick>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40022000 	.word	0x40022000
 800505c:	40021000 	.word	0x40021000
 8005060:	04c4b400 	.word	0x04c4b400
 8005064:	08008274 	.word	0x08008274
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005076:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b04      	cmp	r3, #4
 8005080:	d102      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	e047      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d102      	bne.n	800509a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005094:	4b26      	ldr	r3, [pc, #152]	; (8005130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e03e      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d136      	bne.n	8005114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	3301      	adds	r3, #1
 80050bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ce:	68d2      	ldr	r2, [r2, #12]
 80050d0:	0a12      	lsrs	r2, r2, #8
 80050d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050e8:	68d2      	ldr	r2, [r2, #12]
 80050ea:	0a12      	lsrs	r2, r2, #8
 80050ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
      break;
 80050f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	0e5b      	lsrs	r3, r3, #25
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	3301      	adds	r3, #1
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e001      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005118:	693b      	ldr	r3, [r7, #16]
}
 800511a:	4618      	mov	r0, r3
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	00f42400 	.word	0x00f42400
 8005130:	016e3600 	.word	0x016e3600

08005134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <HAL_RCC_GetHCLKFreq+0x14>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000000 	.word	0x20000000

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005150:	f7ff fff0 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4904      	ldr	r1, [pc, #16]	; (8005174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	08008284 	.word	0x08008284

08005178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800517c:	f7ff ffda 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0adb      	lsrs	r3, r3, #11
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000
 80051a0:	08008284 	.word	0x08008284

080051a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	3301      	adds	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d10c      	bne.n	80051e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c8:	4a17      	ldr	r2, [pc, #92]	; (8005228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	4a14      	ldr	r2, [pc, #80]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d2:	68d2      	ldr	r2, [r2, #12]
 80051d4:	0a12      	lsrs	r2, r2, #8
 80051d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	617b      	str	r3, [r7, #20]
    break;
 80051e0:	e00c      	b.n	80051fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051e2:	4a12      	ldr	r2, [pc, #72]	; (800522c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ec:	68d2      	ldr	r2, [r2, #12]
 80051ee:	0a12      	lsrs	r2, r2, #8
 80051f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]
    break;
 80051fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0e5b      	lsrs	r3, r3, #25
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	3301      	adds	r3, #1
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005216:	687b      	ldr	r3, [r7, #4]
}
 8005218:	4618      	mov	r0, r3
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40021000 	.word	0x40021000
 8005228:	016e3600 	.word	0x016e3600
 800522c:	00f42400 	.word	0x00f42400

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005238:	2300      	movs	r3, #0
 800523a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800523c:	2300      	movs	r3, #0
 800523e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8098 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005252:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	4b40      	ldr	r3, [pc, #256]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	4a3f      	ldr	r2, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6593      	str	r3, [r2, #88]	; 0x58
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005276:	2301      	movs	r3, #1
 8005278:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527a:	4b3a      	ldr	r3, [pc, #232]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a39      	ldr	r2, [pc, #228]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005286:	f7fc fc09 	bl	8001a9c <HAL_GetTick>
 800528a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528c:	e009      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fc fc05 	bl	8001a9c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d902      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	74fb      	strb	r3, [r7, #19]
        break;
 80052a0:	e005      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ef      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d159      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052b4:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01e      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d019      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052fc:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7fc fbc5 	bl	8001a9c <HAL_GetTick>
 8005312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005314:	e00b      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fc fbc1 	bl	8001a9c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d902      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	74fb      	strb	r3, [r7, #19]
            break;
 800532c:	e006      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ec      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800533c:	7cfb      	ldrb	r3, [r7, #19]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005358:	e008      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	74bb      	strb	r3, [r7, #18]
 800535e:	e005      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536c:	7c7b      	ldrb	r3, [r7, #17]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4ba7      	ldr	r3, [pc, #668]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	4aa6      	ldr	r2, [pc, #664]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538a:	4ba1      	ldr	r3, [pc, #644]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	499d      	ldr	r1, [pc, #628]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ac:	4b98      	ldr	r3, [pc, #608]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4995      	ldr	r1, [pc, #596]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ce:	4b90      	ldr	r3, [pc, #576]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	498c      	ldr	r1, [pc, #560]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f0:	4b87      	ldr	r3, [pc, #540]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4984      	ldr	r1, [pc, #528]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005412:	4b7f      	ldr	r3, [pc, #508]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	497b      	ldr	r1, [pc, #492]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005434:	4b76      	ldr	r3, [pc, #472]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	4973      	ldr	r1, [pc, #460]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005456:	4b6e      	ldr	r3, [pc, #440]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	496a      	ldr	r1, [pc, #424]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005478:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4962      	ldr	r1, [pc, #392]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800549a:	4b5d      	ldr	r3, [pc, #372]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	4959      	ldr	r1, [pc, #356]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054bc:	4b54      	ldr	r3, [pc, #336]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c2:	f023 0203 	bic.w	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	4951      	ldr	r1, [pc, #324]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054de:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4948      	ldr	r1, [pc, #288]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d015      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005500:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	4940      	ldr	r1, [pc, #256]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d105      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005520:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	4932      	ldr	r1, [pc, #200]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	4924      	ldr	r1, [pc, #144]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d015      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	4916      	ldr	r1, [pc, #88]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c6:	d105      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a10      	ldr	r2, [pc, #64]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d019      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	4908      	ldr	r1, [pc, #32]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fe:	d109      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a02      	ldr	r2, [pc, #8]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560a:	60d3      	str	r3, [r2, #12]
 800560c:	e002      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	4926      	ldr	r1, [pc, #152]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005658:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	4918      	ldr	r1, [pc, #96]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005682:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569e:	490a      	ldr	r1, [pc, #40]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000

080056cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e049      	b.n	8005772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc f868 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f000 fb62 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f241 1311 	movw	r3, #4369	; 0x1111
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <HAL_TIM_Base_Stop+0x38>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	f244 4344 	movw	r3, #17476	; 0x4444
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <HAL_TIM_Base_Stop+0x38>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e054      	b.n	800588a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <HAL_TIM_Base_Start_IT+0xd0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d01d      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <HAL_TIM_Base_Start_IT+0xd4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <HAL_TIM_Base_Start_IT+0xe4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d115      	bne.n	8005874 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005850:	4013      	ands	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b06      	cmp	r3, #6
 8005858:	d015      	beq.n	8005886 <HAL_TIM_Base_Start_IT+0xbe>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d011      	beq.n	8005886 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	e008      	b.n	8005886 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e000      	b.n	8005888 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40015000 	.word	0x40015000
 80058b4:	00010007 	.word	0x00010007

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0202 	mvn.w	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa48 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa3a 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa4b 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d020      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa22 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa14 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa25 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f9fc 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f9ee 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f9ff 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9d6 	bl	8005d98 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9c8 	bl	8005d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f9d9 	bl	8005dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0201 	mvn.w	r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fb fb46 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fbb1 	bl	80061b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fba9 	bl	80061c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f993 	bl	8005dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0220 	mvn.w	r2, #32
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb71 	bl	80061a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb7d 	bl	80061dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00c      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb75 	bl	80061f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb6d 	bl	8006204 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00c      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fb65 	bl	8006218 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0f6      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x20a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6f      	ldr	r2, [pc, #444]	; (8005d6c <HAL_TIM_ConfigClockSource+0x214>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f000 80c1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bb4:	4a6d      	ldr	r2, [pc, #436]	; (8005d6c <HAL_TIM_ConfigClockSource+0x214>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f200 80c6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bbc:	4a6c      	ldr	r2, [pc, #432]	; (8005d70 <HAL_TIM_ConfigClockSource+0x218>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f000 80b9 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <HAL_TIM_ConfigClockSource+0x218>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f200 80be 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bcc:	4a69      	ldr	r2, [pc, #420]	; (8005d74 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f000 80b1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bd4:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f200 80b6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bdc:	4a66      	ldr	r2, [pc, #408]	; (8005d78 <HAL_TIM_ConfigClockSource+0x220>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f000 80a9 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005be4:	4a64      	ldr	r2, [pc, #400]	; (8005d78 <HAL_TIM_ConfigClockSource+0x220>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	f200 80ae 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bec:	4a63      	ldr	r2, [pc, #396]	; (8005d7c <HAL_TIM_ConfigClockSource+0x224>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f000 80a1 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf4:	4a61      	ldr	r2, [pc, #388]	; (8005d7c <HAL_TIM_ConfigClockSource+0x224>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f200 80a6 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bfc:	4a60      	ldr	r2, [pc, #384]	; (8005d80 <HAL_TIM_ConfigClockSource+0x228>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f000 8099 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c04:	4a5e      	ldr	r2, [pc, #376]	; (8005d80 <HAL_TIM_ConfigClockSource+0x228>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	f200 809e 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c10:	f000 8091 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c18:	f200 8096 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c20:	f000 8089 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c28:	f200 808e 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x158>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x1f6>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x12a>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x19e>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0x17e>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x1be>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x1de>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	f000 f9cf 	bl	8006034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	f000 f9b8 	bl	8006034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 f92a 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f983 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 f949 	bl	8005f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f973 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 f90a 	bl	8005f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f963 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 f95a 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	00100070 	.word	0x00100070
 8005d70:	00100060 	.word	0x00100060
 8005d74:	00100050 	.word	0x00100050
 8005d78:	00100040 	.word	0x00100040
 8005d7c:	00100030 	.word	0x00100030
 8005d80:	00100020 	.word	0x00100020

08005d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a4c      	ldr	r2, [pc, #304]	; (8005f18 <TIM_Base_SetConfig+0x144>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d017      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d013      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a49      	ldr	r2, [pc, #292]	; (8005f1c <TIM_Base_SetConfig+0x148>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a48      	ldr	r2, [pc, #288]	; (8005f20 <TIM_Base_SetConfig+0x14c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a47      	ldr	r2, [pc, #284]	; (8005f24 <TIM_Base_SetConfig+0x150>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a46      	ldr	r2, [pc, #280]	; (8005f28 <TIM_Base_SetConfig+0x154>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x48>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a45      	ldr	r2, [pc, #276]	; (8005f2c <TIM_Base_SetConfig+0x158>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a39      	ldr	r2, [pc, #228]	; (8005f18 <TIM_Base_SetConfig+0x144>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d023      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d01f      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a36      	ldr	r2, [pc, #216]	; (8005f1c <TIM_Base_SetConfig+0x148>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01b      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a35      	ldr	r2, [pc, #212]	; (8005f20 <TIM_Base_SetConfig+0x14c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d017      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a34      	ldr	r2, [pc, #208]	; (8005f24 <TIM_Base_SetConfig+0x150>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a33      	ldr	r2, [pc, #204]	; (8005f28 <TIM_Base_SetConfig+0x154>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a33      	ldr	r2, [pc, #204]	; (8005f30 <TIM_Base_SetConfig+0x15c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a32      	ldr	r2, [pc, #200]	; (8005f34 <TIM_Base_SetConfig+0x160>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <TIM_Base_SetConfig+0x164>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0xaa>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <TIM_Base_SetConfig+0x158>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <TIM_Base_SetConfig+0x144>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <TIM_Base_SetConfig+0x110>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <TIM_Base_SetConfig+0x154>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0x110>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <TIM_Base_SetConfig+0x15c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0x110>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <TIM_Base_SetConfig+0x160>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0x110>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <TIM_Base_SetConfig+0x164>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0x110>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <TIM_Base_SetConfig+0x158>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d103      	bne.n	8005eec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40015000 	.word	0x40015000
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800

08005f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0201 	bic.w	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 030a 	bic.w	r3, r3, #10
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0210 	bic.w	r2, r3, #16
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	031b      	lsls	r3, r3, #12
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	f043 0307 	orr.w	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800604e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	021a      	lsls	r2, r3, #8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	431a      	orrs	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	609a      	str	r2, [r3, #8]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e074      	b.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a34      	ldr	r2, [pc, #208]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a33      	ldr	r2, [pc, #204]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a31      	ldr	r2, [pc, #196]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d108      	bne.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a21      	ldr	r2, [pc, #132]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d022      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610c:	d01d      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d018      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d013      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d10c      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40015000 	.word	0x40015000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40014000 	.word	0x40014000

080061a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e042      	b.n	80062c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fb fa11 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2224      	movs	r2, #36	; 0x24
 800625a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 ffbe 	bl	80071f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fcbf 	bl	8006c00 <UART_SetConfig>
 8006282:	4603      	mov	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e01b      	b.n	80062c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f83d 	bl	800733c <UART_CheckIdleState>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d17b      	bne.n	80063de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_UART_Transmit+0x26>
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e074      	b.n	80063e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006306:	f7fb fbc9 	bl	8001a9c <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d108      	bne.n	8006338 <HAL_UART_Transmit+0x6c>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	e003      	b.n	8006340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006340:	e030      	b.n	80063a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f001 f89f 	bl	8007490 <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e03d      	b.n	80063e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006378:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	3302      	adds	r3, #2
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e007      	b.n	8006392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1c8      	bne.n	8006342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2140      	movs	r1, #64	; 0x40
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f001 f868 	bl	8007490 <UART_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e006      	b.n	80063e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063fe:	2b20      	cmp	r3, #32
 8006400:	f040 80b5 	bne.w	800656e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Receive+0x28>
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0ad      	b.n	8006570 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2222      	movs	r2, #34	; 0x22
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642a:	f7fb fb37 	bl	8001a9c <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d10e      	bne.n	8006468 <HAL_UART_Receive+0x80>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <HAL_UART_Receive+0x76>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800645c:	e02d      	b.n	80064ba <HAL_UART_Receive+0xd2>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006466:	e028      	b.n	80064ba <HAL_UART_Receive+0xd2>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_UART_Receive+0xa4>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <HAL_UART_Receive+0x9a>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006480:	e01b      	b.n	80064ba <HAL_UART_Receive+0xd2>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	227f      	movs	r2, #127	; 0x7f
 8006486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800648a:	e016      	b.n	80064ba <HAL_UART_Receive+0xd2>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006494:	d10d      	bne.n	80064b2 <HAL_UART_Receive+0xca>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Receive+0xc0>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	227f      	movs	r2, #127	; 0x7f
 80064a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a6:	e008      	b.n	80064ba <HAL_UART_Receive+0xd2>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	223f      	movs	r2, #63	; 0x3f
 80064ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064b0:	e003      	b.n	80064ba <HAL_UART_Receive+0xd2>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d108      	bne.n	80064de <HAL_UART_Receive+0xf6>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e003      	b.n	80064e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064e6:	e036      	b.n	8006556 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	2120      	movs	r1, #32
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 ffcc 	bl	8007490 <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e032      	b.n	8006570 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10c      	bne.n	800652a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	b29a      	uxth	r2, r3
 8006518:	8a7b      	ldrh	r3, [r7, #18]
 800651a:	4013      	ands	r3, r2
 800651c:	b29a      	uxth	r2, r3
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	3302      	adds	r3, #2
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	e00c      	b.n	8006544 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	b2da      	uxtb	r2, r3
 8006532:	8a7b      	ldrh	r3, [r7, #18]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4013      	ands	r3, r2
 8006538:	b2da      	uxtb	r2, r3
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c2      	bne.n	80064e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b0ba      	sub	sp, #232	; 0xe8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800659e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80065a6:	4013      	ands	r3, r2
 80065a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d11b      	bne.n	80065ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d015      	beq.n	80065ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 82e3 	beq.w	8006ba8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      }
      return;
 80065ea:	e2dd      	b.n	8006ba8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8123 	beq.w	800683c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <HAL_UART_IRQHandler+0x2b8>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006606:	4b8b      	ldr	r3, [pc, #556]	; (8006834 <HAL_UART_IRQHandler+0x2bc>)
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8116 	beq.w	800683c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d011      	beq.n	8006640 <HAL_UART_IRQHandler+0xc8>
 800661c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2201      	movs	r2, #1
 800662e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d011      	beq.n	8006670 <HAL_UART_IRQHandler+0xf8>
 800664c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2202      	movs	r2, #2
 800665e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_UART_IRQHandler+0x128>
 800667c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2204      	movs	r2, #4
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f043 0202 	orr.w	r2, r3, #2
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d017      	beq.n	80066dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066bc:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <HAL_UART_IRQHandler+0x2b8>)
 80066be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2208      	movs	r2, #8
 80066ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d2:	f043 0208 	orr.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <HAL_UART_IRQHandler+0x196>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8249 	beq.w	8006bac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d005      	beq.n	8006772 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676e:	2b00      	cmp	r3, #0
 8006770:	d054      	beq.n	800681c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fef9 	bl	800756a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d146      	bne.n	8006814 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800679c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1d9      	bne.n	8006786 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d017      	beq.n	800680c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_UART_IRQHandler+0x2c0>)
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fd fb31 	bl	8003e54 <HAL_DMA_Abort_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d019      	beq.n	800682c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006806:	4610      	mov	r0, r2
 8006808:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680a:	e00f      	b.n	800682c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f9e1 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	e00b      	b.n	800682c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9dd 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	e007      	b.n	800682c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f9d9 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800682a:	e1bf      	b.n	8006bac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	bf00      	nop
    return;
 800682e:	e1bd      	b.n	8006bac <HAL_UART_IRQHandler+0x634>
 8006830:	10000001 	.word	0x10000001
 8006834:	04000120 	.word	0x04000120
 8006838:	08007637 	.word	0x08007637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006840:	2b01      	cmp	r3, #1
 8006842:	f040 8153 	bne.w	8006aec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 814c 	beq.w	8006aec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8145 	beq.w	8006aec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2210      	movs	r2, #16
 8006868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	f040 80bb 	bne.w	80069f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 818f 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800689c:	429a      	cmp	r2, r3
 800689e:	f080 8187 	bcs.w	8006bb0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 8087 	bne.w	80069ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1da      	bne.n	80068c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800691a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800692e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006932:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006936:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e1      	bne.n	800690a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3308      	adds	r3, #8
 8006966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800696a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800696c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006970:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e3      	bne.n	8006946 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800699a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e4      	bne.n	800698c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd f9ea 	bl	8003da2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8fd 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ee:	e0df      	b.n	8006bb0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80d1 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 80cc 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e4      	bne.n	8006a1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e1      	bne.n	8006a52 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f87f 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aea:	e063      	b.n	8006bb4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <HAL_UART_IRQHandler+0x59e>
 8006af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fdd2 	bl	80076b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b14:	e051      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d014      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d03a      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
    }
    return;
 8006b4a:	e035      	b.n	8006bb8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5f4>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd7c 	bl	8007662 <UART_EndTransmit_IT>
    return;
 8006b6a:	e026      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_UART_IRQHandler+0x614>
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fdab 	bl	80076e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b8a:	e016      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_UART_IRQHandler+0x642>
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da0c      	bge.n	8006bba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd93 	bl	80076cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba6:	e008      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
      return;
 8006ba8:	bf00      	nop
 8006baa:	e006      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
    return;
 8006bac:	bf00      	nop
 8006bae:	e004      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
      return;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
      return;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_UART_IRQHandler+0x642>
    return;
 8006bb8:	bf00      	nop
  }
}
 8006bba:	37e8      	adds	r7, #232	; 0xe8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b08c      	sub	sp, #48	; 0x30
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4baa      	ldr	r3, [pc, #680]	; (8006ed8 <UART_SetConfig+0x2d8>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a9f      	ldr	r2, [pc, #636]	; (8006edc <UART_SetConfig+0x2dc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	f023 010f 	bic.w	r1, r3, #15
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a90      	ldr	r2, [pc, #576]	; (8006ee0 <UART_SetConfig+0x2e0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d125      	bne.n	8006cf0 <UART_SetConfig+0xf0>
 8006ca4:	4b8f      	ldr	r3, [pc, #572]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d81a      	bhi.n	8006ce8 <UART_SetConfig+0xe8>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0xb8>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006cd9 	.word	0x08006cd9
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cce:	e116      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd6:	e112      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cde:	e10e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e10a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e106      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7c      	ldr	r2, [pc, #496]	; (8006ee8 <UART_SetConfig+0x2e8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d138      	bne.n	8006d6c <UART_SetConfig+0x16c>
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b0c      	cmp	r3, #12
 8006d06:	d82d      	bhi.n	8006d64 <UART_SetConfig+0x164>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x110>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d65 	.word	0x08006d65
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d55 	.word	0x08006d55
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d65 	.word	0x08006d65
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e0d8      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e0d4      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	e0d0      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d62:	e0cc      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6a:	e0c8      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a5e      	ldr	r2, [pc, #376]	; (8006eec <UART_SetConfig+0x2ec>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d125      	bne.n	8006dc2 <UART_SetConfig+0x1c2>
 8006d76:	4b5b      	ldr	r3, [pc, #364]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d016      	beq.n	8006db2 <UART_SetConfig+0x1b2>
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d818      	bhi.n	8006dba <UART_SetConfig+0x1ba>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d00a      	beq.n	8006da2 <UART_SetConfig+0x1a2>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d814      	bhi.n	8006dba <UART_SetConfig+0x1ba>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <UART_SetConfig+0x19a>
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d008      	beq.n	8006daa <UART_SetConfig+0x1aa>
 8006d98:	e00f      	b.n	8006dba <UART_SetConfig+0x1ba>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da0:	e0ad      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006da2:	2302      	movs	r3, #2
 8006da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da8:	e0a9      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006daa:	2304      	movs	r3, #4
 8006dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db0:	e0a5      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006db2:	2308      	movs	r3, #8
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db8:	e0a1      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006dba:	2310      	movs	r3, #16
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc0:	e09d      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4a      	ldr	r2, [pc, #296]	; (8006ef0 <UART_SetConfig+0x2f0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d125      	bne.n	8006e18 <UART_SetConfig+0x218>
 8006dcc:	4b45      	ldr	r3, [pc, #276]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd8:	d016      	beq.n	8006e08 <UART_SetConfig+0x208>
 8006dda:	2bc0      	cmp	r3, #192	; 0xc0
 8006ddc:	d818      	bhi.n	8006e10 <UART_SetConfig+0x210>
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d00a      	beq.n	8006df8 <UART_SetConfig+0x1f8>
 8006de2:	2b80      	cmp	r3, #128	; 0x80
 8006de4:	d814      	bhi.n	8006e10 <UART_SetConfig+0x210>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <UART_SetConfig+0x1f0>
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d008      	beq.n	8006e00 <UART_SetConfig+0x200>
 8006dee:	e00f      	b.n	8006e10 <UART_SetConfig+0x210>
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e082      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e07e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e07a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0e:	e076      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e072      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <UART_SetConfig+0x2f4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d12a      	bne.n	8006e78 <UART_SetConfig+0x278>
 8006e22:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e30:	d01a      	beq.n	8006e68 <UART_SetConfig+0x268>
 8006e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e36:	d81b      	bhi.n	8006e70 <UART_SetConfig+0x270>
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d00c      	beq.n	8006e58 <UART_SetConfig+0x258>
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e42:	d815      	bhi.n	8006e70 <UART_SetConfig+0x270>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <UART_SetConfig+0x250>
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	d008      	beq.n	8006e60 <UART_SetConfig+0x260>
 8006e4e:	e00f      	b.n	8006e70 <UART_SetConfig+0x270>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e56:	e052      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5e:	e04e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e66:	e04a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6e:	e046      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e76:	e042      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a17      	ldr	r2, [pc, #92]	; (8006edc <UART_SetConfig+0x2dc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d13a      	bne.n	8006ef8 <UART_SetConfig+0x2f8>
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <UART_SetConfig+0x2e4>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e90:	d01a      	beq.n	8006ec8 <UART_SetConfig+0x2c8>
 8006e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e96:	d81b      	bhi.n	8006ed0 <UART_SetConfig+0x2d0>
 8006e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9c:	d00c      	beq.n	8006eb8 <UART_SetConfig+0x2b8>
 8006e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea2:	d815      	bhi.n	8006ed0 <UART_SetConfig+0x2d0>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <UART_SetConfig+0x2b0>
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eac:	d008      	beq.n	8006ec0 <UART_SetConfig+0x2c0>
 8006eae:	e00f      	b.n	8006ed0 <UART_SetConfig+0x2d0>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	e022      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ebe:	e01e      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec6:	e01a      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ece:	e016      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e012      	b.n	8006efe <UART_SetConfig+0x2fe>
 8006ed8:	cfff69f3 	.word	0xcfff69f3
 8006edc:	40008000 	.word	0x40008000
 8006ee0:	40013800 	.word	0x40013800
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	40004400 	.word	0x40004400
 8006eec:	40004800 	.word	0x40004800
 8006ef0:	40004c00 	.word	0x40004c00
 8006ef4:	40005000 	.word	0x40005000
 8006ef8:	2310      	movs	r3, #16
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4aae      	ldr	r2, [pc, #696]	; (80071bc <UART_SetConfig+0x5bc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	f040 8097 	bne.w	8007038 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d823      	bhi.n	8006f5a <UART_SetConfig+0x35a>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <UART_SetConfig+0x318>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f5b 	.word	0x08006f5b
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f4b 	.word	0x08006f4b
 8006f2c:	08006f5b 	.word	0x08006f5b
 8006f30:	08006f5b 	.word	0x08006f5b
 8006f34:	08006f5b 	.word	0x08006f5b
 8006f38:	08006f53 	.word	0x08006f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f3c:	f7fe f906 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8006f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f42:	e010      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f44:	4b9e      	ldr	r3, [pc, #632]	; (80071c0 <UART_SetConfig+0x5c0>)
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f48:	e00d      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fe f891 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8006f4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f50:	e009      	b.n	8006f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f58:	e005      	b.n	8006f66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8130 	beq.w	80071ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	4a94      	ldr	r2, [pc, #592]	; (80071c4 <UART_SetConfig+0x5c4>)
 8006f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d305      	bcc.n	8006f9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d903      	bls.n	8006fa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fa4:	e113      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2200      	movs	r2, #0
 8006faa:	60bb      	str	r3, [r7, #8]
 8006fac:	60fa      	str	r2, [r7, #12]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	4a84      	ldr	r2, [pc, #528]	; (80071c4 <UART_SetConfig+0x5c4>)
 8006fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fc8:	f7f9 fda0 	bl	8000b0c <__aeabi_uldivmod>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	020b      	lsls	r3, r1, #8
 8006fde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fe2:	0202      	lsls	r2, r0, #8
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	6849      	ldr	r1, [r1, #4]
 8006fe8:	0849      	lsrs	r1, r1, #1
 8006fea:	2000      	movs	r0, #0
 8006fec:	460c      	mov	r4, r1
 8006fee:	4605      	mov	r5, r0
 8006ff0:	eb12 0804 	adds.w	r8, r2, r4
 8006ff4:	eb43 0905 	adc.w	r9, r3, r5
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	469a      	mov	sl, r3
 8007000:	4693      	mov	fp, r2
 8007002:	4652      	mov	r2, sl
 8007004:	465b      	mov	r3, fp
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 fd7f 	bl	8000b0c <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4613      	mov	r3, r2
 8007014:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701c:	d308      	bcc.n	8007030 <UART_SetConfig+0x430>
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007024:	d204      	bcs.n	8007030 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	e0ce      	b.n	80071ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007036:	e0ca      	b.n	80071ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007040:	d166      	bne.n	8007110 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007046:	2b08      	cmp	r3, #8
 8007048:	d827      	bhi.n	800709a <UART_SetConfig+0x49a>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x450>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007075 	.word	0x08007075
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007085 	.word	0x08007085
 800705c:	0800709b 	.word	0x0800709b
 8007060:	0800708b 	.word	0x0800708b
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800709b 	.word	0x0800709b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007074:	f7fe f86a 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707a:	e014      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800707c:	f7fe f87c 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8007080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <UART_SetConfig+0x5c0>)
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fd fff1 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007090:	e009      	b.n	80070a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007098:	e005      	b.n	80070a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8090 	beq.w	80071ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	4a44      	ldr	r2, [pc, #272]	; (80071c4 <UART_SetConfig+0x5c4>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c0:	005a      	lsls	r2, r3, #1
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	441a      	add	r2, r3
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d916      	bls.n	8007108 <UART_SetConfig+0x508>
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e0:	d212      	bcs.n	8007108 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f023 030f 	bic.w	r3, r3, #15
 80070ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	8bfb      	ldrh	r3, [r7, #30]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	8bfa      	ldrh	r2, [r7, #30]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e062      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800710e:	e05e      	b.n	80071ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007114:	2b08      	cmp	r3, #8
 8007116:	d828      	bhi.n	800716a <UART_SetConfig+0x56a>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0x520>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007145 	.word	0x08007145
 8007124:	0800714d 	.word	0x0800714d
 8007128:	08007155 	.word	0x08007155
 800712c:	0800716b 	.word	0x0800716b
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800716b 	.word	0x0800716b
 8007138:	0800716b 	.word	0x0800716b
 800713c:	0800716b 	.word	0x0800716b
 8007140:	08007163 	.word	0x08007163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007144:	f7fe f802 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8007148:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800714a:	e014      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714c:	f7fe f814 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007152:	e010      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007154:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <UART_SetConfig+0x5c0>)
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007158:	e00d      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715a:	f7fd ff89 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007160:	e009      	b.n	8007176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007168:	e005      	b.n	8007176 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007174:	bf00      	nop
    }

    if (pclk != 0U)
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d028      	beq.n	80071ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <UART_SetConfig+0x5c4>)
 8007182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007186:	461a      	mov	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	fbb3 f2f2 	udiv	r2, r3, r2
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	441a      	add	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	fbb2 f3f3 	udiv	r3, r2, r3
 800719e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d910      	bls.n	80071c8 <UART_SetConfig+0x5c8>
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d20c      	bcs.n	80071c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x5ce>
 80071ba:	bf00      	nop
 80071bc:	40008000 	.word	0x40008000
 80071c0:	00f42400 	.word	0x00f42400
 80071c4:	0800828c 	.word	0x0800828c
      }
      else
      {
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2201      	movs	r2, #1
 80071da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01a      	beq.n	800730e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f6:	d10a      	bne.n	800730e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b098      	sub	sp, #96	; 0x60
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734c:	f7fa fba6 	bl	8001a9c <HAL_GetTick>
 8007350:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d12f      	bne.n	80073c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007368:	2200      	movs	r2, #0
 800736a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f88e 	bl	8007490 <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d022      	beq.n	80073c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738e:	653b      	str	r3, [r7, #80]	; 0x50
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007398:	647b      	str	r3, [r7, #68]	; 0x44
 800739a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800739e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e063      	b.n	8007488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d149      	bne.n	8007462 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f857 	bl	8007490 <UART_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d03c      	beq.n	8007462 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	623b      	str	r3, [r7, #32]
   return(result);
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
 8007408:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800740c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60fb      	str	r3, [r7, #12]
   return(result);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743a:	61fa      	str	r2, [r7, #28]
 800743c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	69b9      	ldr	r1, [r7, #24]
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	617b      	str	r3, [r7, #20]
   return(result);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e012      	b.n	8007488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3758      	adds	r7, #88	; 0x58
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a0:	e04f      	b.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d04b      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fa faf7 	bl	8001a9c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e04e      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d037      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d034      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d031      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d110      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f838 	bl	800756a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2208      	movs	r2, #8
 80074fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e029      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751c:	d111      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f81e 	bl	800756a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e00f      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4013      	ands	r3, r2
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	bf0c      	ite	eq
 8007552:	2301      	moveq	r3, #1
 8007554:	2300      	movne	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	429a      	cmp	r2, r3
 800755e:	d0a0      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800756a:	b480      	push	{r7}
 800756c:	b095      	sub	sp, #84	; 0x54
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	643b      	str	r3, [r7, #64]	; 0x40
 8007592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3308      	adds	r3, #8
 80075c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e3      	bne.n	80075a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d118      	bne.n	8007616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f023 0310 	bic.w	r3, r3, #16
 80075f8:	647b      	str	r3, [r7, #68]	; 0x44
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6979      	ldr	r1, [r7, #20]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	613b      	str	r3, [r7, #16]
   return(result);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e6      	bne.n	80075e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	675a      	str	r2, [r3, #116]	; 0x74
}
 800762a:	bf00      	nop
 800762c:	3754      	adds	r7, #84	; 0x54
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fabd 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b088      	sub	sp, #32
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	60bb      	str	r3, [r7, #8]
   return(result);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fa88 	bl	8006bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_UARTEx_DisableFifoMode+0x16>
 8007706:	2302      	movs	r3, #2
 8007708:	e027      	b.n	800775a <HAL_UARTEx_DisableFifoMode+0x66>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2224      	movs	r2, #36	; 0x24
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0201 	bic.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800777a:	2302      	movs	r3, #2
 800777c:	e02d      	b.n	80077da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2224      	movs	r2, #36	; 0x24
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f850 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e02d      	b.n	8007856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2224      	movs	r2, #36	; 0x24
 8007806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f812 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786c:	2b00      	cmp	r3, #0
 800786e:	d108      	bne.n	8007882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007880:	e031      	b.n	80078e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007882:	2308      	movs	r3, #8
 8007884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007886:	2308      	movs	r3, #8
 8007888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	0e5b      	lsrs	r3, r3, #25
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	0f5b      	lsrs	r3, r3, #29
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	7b3a      	ldrb	r2, [r7, #12]
 80078ae:	4911      	ldr	r1, [pc, #68]	; (80078f4 <UARTEx_SetNbDataToProcess+0x94>)
 80078b0:	5c8a      	ldrb	r2, [r1, r2]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078b6:	7b3a      	ldrb	r2, [r7, #12]
 80078b8:	490f      	ldr	r1, [pc, #60]	; (80078f8 <UARTEx_SetNbDataToProcess+0x98>)
 80078ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	7b7a      	ldrb	r2, [r7, #13]
 80078cc:	4909      	ldr	r1, [pc, #36]	; (80078f4 <UARTEx_SetNbDataToProcess+0x94>)
 80078ce:	5c8a      	ldrb	r2, [r1, r2]
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078d4:	7b7a      	ldrb	r2, [r7, #13]
 80078d6:	4908      	ldr	r1, [pc, #32]	; (80078f8 <UARTEx_SetNbDataToProcess+0x98>)
 80078d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078da:	fb93 f3f2 	sdiv	r3, r3, r2
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	080082a4 	.word	0x080082a4
 80078f8:	080082ac 	.word	0x080082ac

080078fc <siprintf>:
 80078fc:	b40e      	push	{r1, r2, r3}
 80078fe:	b500      	push	{lr}
 8007900:	b09c      	sub	sp, #112	; 0x70
 8007902:	ab1d      	add	r3, sp, #116	; 0x74
 8007904:	9002      	str	r0, [sp, #8]
 8007906:	9006      	str	r0, [sp, #24]
 8007908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800790c:	4809      	ldr	r0, [pc, #36]	; (8007934 <siprintf+0x38>)
 800790e:	9107      	str	r1, [sp, #28]
 8007910:	9104      	str	r1, [sp, #16]
 8007912:	4909      	ldr	r1, [pc, #36]	; (8007938 <siprintf+0x3c>)
 8007914:	f853 2b04 	ldr.w	r2, [r3], #4
 8007918:	9105      	str	r1, [sp, #20]
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	a902      	add	r1, sp, #8
 8007920:	f000 f992 	bl	8007c48 <_svfiprintf_r>
 8007924:	9b02      	ldr	r3, [sp, #8]
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	b01c      	add	sp, #112	; 0x70
 800792c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007930:	b003      	add	sp, #12
 8007932:	4770      	bx	lr
 8007934:	20000078 	.word	0x20000078
 8007938:	ffff0208 	.word	0xffff0208

0800793c <memset>:
 800793c:	4402      	add	r2, r0
 800793e:	4603      	mov	r3, r0
 8007940:	4293      	cmp	r3, r2
 8007942:	d100      	bne.n	8007946 <memset+0xa>
 8007944:	4770      	bx	lr
 8007946:	f803 1b01 	strb.w	r1, [r3], #1
 800794a:	e7f9      	b.n	8007940 <memset+0x4>

0800794c <__errno>:
 800794c:	4b01      	ldr	r3, [pc, #4]	; (8007954 <__errno+0x8>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000078 	.word	0x20000078

08007958 <__libc_init_array>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4d0d      	ldr	r5, [pc, #52]	; (8007990 <__libc_init_array+0x38>)
 800795c:	4c0d      	ldr	r4, [pc, #52]	; (8007994 <__libc_init_array+0x3c>)
 800795e:	1b64      	subs	r4, r4, r5
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	2600      	movs	r6, #0
 8007964:	42a6      	cmp	r6, r4
 8007966:	d109      	bne.n	800797c <__libc_init_array+0x24>
 8007968:	4d0b      	ldr	r5, [pc, #44]	; (8007998 <__libc_init_array+0x40>)
 800796a:	4c0c      	ldr	r4, [pc, #48]	; (800799c <__libc_init_array+0x44>)
 800796c:	f000 fc6a 	bl	8008244 <_init>
 8007970:	1b64      	subs	r4, r4, r5
 8007972:	10a4      	asrs	r4, r4, #2
 8007974:	2600      	movs	r6, #0
 8007976:	42a6      	cmp	r6, r4
 8007978:	d105      	bne.n	8007986 <__libc_init_array+0x2e>
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007980:	4798      	blx	r3
 8007982:	3601      	adds	r6, #1
 8007984:	e7ee      	b.n	8007964 <__libc_init_array+0xc>
 8007986:	f855 3b04 	ldr.w	r3, [r5], #4
 800798a:	4798      	blx	r3
 800798c:	3601      	adds	r6, #1
 800798e:	e7f2      	b.n	8007976 <__libc_init_array+0x1e>
 8007990:	080082f0 	.word	0x080082f0
 8007994:	080082f0 	.word	0x080082f0
 8007998:	080082f0 	.word	0x080082f0
 800799c:	080082f4 	.word	0x080082f4

080079a0 <__retarget_lock_acquire_recursive>:
 80079a0:	4770      	bx	lr

080079a2 <__retarget_lock_release_recursive>:
 80079a2:	4770      	bx	lr

080079a4 <_free_r>:
 80079a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a6:	2900      	cmp	r1, #0
 80079a8:	d044      	beq.n	8007a34 <_free_r+0x90>
 80079aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ae:	9001      	str	r0, [sp, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f1a1 0404 	sub.w	r4, r1, #4
 80079b6:	bfb8      	it	lt
 80079b8:	18e4      	addlt	r4, r4, r3
 80079ba:	f000 f8df 	bl	8007b7c <__malloc_lock>
 80079be:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <_free_r+0x94>)
 80079c0:	9801      	ldr	r0, [sp, #4]
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	b933      	cbnz	r3, 80079d4 <_free_r+0x30>
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	b003      	add	sp, #12
 80079cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079d0:	f000 b8da 	b.w	8007b88 <__malloc_unlock>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d908      	bls.n	80079ea <_free_r+0x46>
 80079d8:	6825      	ldr	r5, [r4, #0]
 80079da:	1961      	adds	r1, r4, r5
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1949      	addeq	r1, r1, r5
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	e7ed      	b.n	80079c6 <_free_r+0x22>
 80079ea:	461a      	mov	r2, r3
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b10b      	cbz	r3, 80079f4 <_free_r+0x50>
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d9fa      	bls.n	80079ea <_free_r+0x46>
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	1855      	adds	r5, r2, r1
 80079f8:	42a5      	cmp	r5, r4
 80079fa:	d10b      	bne.n	8007a14 <_free_r+0x70>
 80079fc:	6824      	ldr	r4, [r4, #0]
 80079fe:	4421      	add	r1, r4
 8007a00:	1854      	adds	r4, r2, r1
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	d1e0      	bne.n	80079ca <_free_r+0x26>
 8007a08:	681c      	ldr	r4, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	440c      	add	r4, r1
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	e7da      	b.n	80079ca <_free_r+0x26>
 8007a14:	d902      	bls.n	8007a1c <_free_r+0x78>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	e7d6      	b.n	80079ca <_free_r+0x26>
 8007a1c:	6825      	ldr	r5, [r4, #0]
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf04      	itt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	6063      	str	r3, [r4, #4]
 8007a2a:	bf04      	itt	eq
 8007a2c:	1949      	addeq	r1, r1, r5
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	6054      	str	r4, [r2, #4]
 8007a32:	e7ca      	b.n	80079ca <_free_r+0x26>
 8007a34:	b003      	add	sp, #12
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	200003c0 	.word	0x200003c0

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0e      	ldr	r6, [pc, #56]	; (8007a78 <sbrk_aligned+0x3c>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f000 fba6 	bl	8008198 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fba1 	bl	8008198 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d00a      	beq.n	8007a70 <sbrk_aligned+0x34>
 8007a5a:	1cc4      	adds	r4, r0, #3
 8007a5c:	f024 0403 	bic.w	r4, r4, #3
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d007      	beq.n	8007a74 <sbrk_aligned+0x38>
 8007a64:	1a21      	subs	r1, r4, r0
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fb96 	bl	8008198 <_sbrk_r>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d101      	bne.n	8007a74 <sbrk_aligned+0x38>
 8007a70:	f04f 34ff 	mov.w	r4, #4294967295
 8007a74:	4620      	mov	r0, r4
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	200003c4 	.word	0x200003c4

08007a7c <_malloc_r>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	1ccd      	adds	r5, r1, #3
 8007a82:	f025 0503 	bic.w	r5, r5, #3
 8007a86:	3508      	adds	r5, #8
 8007a88:	2d0c      	cmp	r5, #12
 8007a8a:	bf38      	it	cc
 8007a8c:	250c      	movcc	r5, #12
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	db01      	blt.n	8007a98 <_malloc_r+0x1c>
 8007a94:	42a9      	cmp	r1, r5
 8007a96:	d905      	bls.n	8007aa4 <_malloc_r+0x28>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b78 <_malloc_r+0xfc>
 8007aa8:	f000 f868 	bl	8007b7c <__malloc_lock>
 8007aac:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab0:	461c      	mov	r4, r3
 8007ab2:	bb5c      	cbnz	r4, 8007b0c <_malloc_r+0x90>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ffc0 	bl	8007a3c <sbrk_aligned>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	4604      	mov	r4, r0
 8007ac0:	d155      	bne.n	8007b6e <_malloc_r+0xf2>
 8007ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac6:	4626      	mov	r6, r4
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	d145      	bne.n	8007b58 <_malloc_r+0xdc>
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d048      	beq.n	8007b62 <_malloc_r+0xe6>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	eb04 0903 	add.w	r9, r4, r3
 8007ada:	f000 fb5d 	bl	8008198 <_sbrk_r>
 8007ade:	4581      	cmp	r9, r0
 8007ae0:	d13f      	bne.n	8007b62 <_malloc_r+0xe6>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	1a6d      	subs	r5, r5, r1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff ffa7 	bl	8007a3c <sbrk_aligned>
 8007aee:	3001      	adds	r0, #1
 8007af0:	d037      	beq.n	8007b62 <_malloc_r+0xe6>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	442b      	add	r3, r5
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	f8d8 3000 	ldr.w	r3, [r8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d038      	beq.n	8007b72 <_malloc_r+0xf6>
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	42a2      	cmp	r2, r4
 8007b04:	d12b      	bne.n	8007b5e <_malloc_r+0xe2>
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	e00f      	b.n	8007b2c <_malloc_r+0xb0>
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	1b52      	subs	r2, r2, r5
 8007b10:	d41f      	bmi.n	8007b52 <_malloc_r+0xd6>
 8007b12:	2a0b      	cmp	r2, #11
 8007b14:	d917      	bls.n	8007b46 <_malloc_r+0xca>
 8007b16:	1961      	adds	r1, r4, r5
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	bf18      	it	ne
 8007b1e:	6059      	strne	r1, [r3, #4]
 8007b20:	6863      	ldr	r3, [r4, #4]
 8007b22:	bf08      	it	eq
 8007b24:	f8c8 1000 	streq.w	r1, [r8]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f000 f829 	bl	8007b88 <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0ae      	beq.n	8007a9e <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7ab      	b.n	8007a9e <_malloc_r+0x22>
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	d1dd      	bne.n	8007b08 <_malloc_r+0x8c>
 8007b4c:	f8c8 2000 	str.w	r2, [r8]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xb0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7ac      	b.n	8007ab2 <_malloc_r+0x36>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b4      	b.n	8007ac8 <_malloc_r+0x4c>
 8007b5e:	4613      	mov	r3, r2
 8007b60:	e7cc      	b.n	8007afc <_malloc_r+0x80>
 8007b62:	230c      	movs	r3, #12
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f80e 	bl	8007b88 <__malloc_unlock>
 8007b6c:	e797      	b.n	8007a9e <_malloc_r+0x22>
 8007b6e:	6025      	str	r5, [r4, #0]
 8007b70:	e7dc      	b.n	8007b2c <_malloc_r+0xb0>
 8007b72:	605b      	str	r3, [r3, #4]
 8007b74:	deff      	udf	#255	; 0xff
 8007b76:	bf00      	nop
 8007b78:	200003c0 	.word	0x200003c0

08007b7c <__malloc_lock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__malloc_lock+0x8>)
 8007b7e:	f7ff bf0f 	b.w	80079a0 <__retarget_lock_acquire_recursive>
 8007b82:	bf00      	nop
 8007b84:	200003bc 	.word	0x200003bc

08007b88 <__malloc_unlock>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__malloc_unlock+0x8>)
 8007b8a:	f7ff bf0a 	b.w	80079a2 <__retarget_lock_release_recursive>
 8007b8e:	bf00      	nop
 8007b90:	200003bc 	.word	0x200003bc

08007b94 <__ssputs_r>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	688e      	ldr	r6, [r1, #8]
 8007b9a:	461f      	mov	r7, r3
 8007b9c:	42be      	cmp	r6, r7
 8007b9e:	680b      	ldr	r3, [r1, #0]
 8007ba0:	4682      	mov	sl, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	4690      	mov	r8, r2
 8007ba6:	d82c      	bhi.n	8007c02 <__ssputs_r+0x6e>
 8007ba8:	898a      	ldrh	r2, [r1, #12]
 8007baa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bae:	d026      	beq.n	8007bfe <__ssputs_r+0x6a>
 8007bb0:	6965      	ldr	r5, [r4, #20]
 8007bb2:	6909      	ldr	r1, [r1, #16]
 8007bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb8:	eba3 0901 	sub.w	r9, r3, r1
 8007bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bc0:	1c7b      	adds	r3, r7, #1
 8007bc2:	444b      	add	r3, r9
 8007bc4:	106d      	asrs	r5, r5, #1
 8007bc6:	429d      	cmp	r5, r3
 8007bc8:	bf38      	it	cc
 8007bca:	461d      	movcc	r5, r3
 8007bcc:	0553      	lsls	r3, r2, #21
 8007bce:	d527      	bpl.n	8007c20 <__ssputs_r+0x8c>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7ff ff53 	bl	8007a7c <_malloc_r>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	b360      	cbz	r0, 8007c34 <__ssputs_r+0xa0>
 8007bda:	6921      	ldr	r1, [r4, #16]
 8007bdc:	464a      	mov	r2, r9
 8007bde:	f000 faeb 	bl	80081b8 <memcpy>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	6126      	str	r6, [r4, #16]
 8007bf0:	6165      	str	r5, [r4, #20]
 8007bf2:	444e      	add	r6, r9
 8007bf4:	eba5 0509 	sub.w	r5, r5, r9
 8007bf8:	6026      	str	r6, [r4, #0]
 8007bfa:	60a5      	str	r5, [r4, #8]
 8007bfc:	463e      	mov	r6, r7
 8007bfe:	42be      	cmp	r6, r7
 8007c00:	d900      	bls.n	8007c04 <__ssputs_r+0x70>
 8007c02:	463e      	mov	r6, r7
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	4632      	mov	r2, r6
 8007c08:	4641      	mov	r1, r8
 8007c0a:	f000 faab 	bl	8008164 <memmove>
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	1b9b      	subs	r3, r3, r6
 8007c12:	60a3      	str	r3, [r4, #8]
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	4433      	add	r3, r6
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c20:	462a      	mov	r2, r5
 8007c22:	f000 fad7 	bl	80081d4 <_realloc_r>
 8007c26:	4606      	mov	r6, r0
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1e0      	bne.n	8007bee <__ssputs_r+0x5a>
 8007c2c:	6921      	ldr	r1, [r4, #16]
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f7ff feb8 	bl	80079a4 <_free_r>
 8007c34:	230c      	movs	r3, #12
 8007c36:	f8ca 3000 	str.w	r3, [sl]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	e7e9      	b.n	8007c1c <__ssputs_r+0x88>

08007c48 <_svfiprintf_r>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	4698      	mov	r8, r3
 8007c4e:	898b      	ldrh	r3, [r1, #12]
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	b09d      	sub	sp, #116	; 0x74
 8007c54:	4607      	mov	r7, r0
 8007c56:	460d      	mov	r5, r1
 8007c58:	4614      	mov	r4, r2
 8007c5a:	d50e      	bpl.n	8007c7a <_svfiprintf_r+0x32>
 8007c5c:	690b      	ldr	r3, [r1, #16]
 8007c5e:	b963      	cbnz	r3, 8007c7a <_svfiprintf_r+0x32>
 8007c60:	2140      	movs	r1, #64	; 0x40
 8007c62:	f7ff ff0b 	bl	8007a7c <_malloc_r>
 8007c66:	6028      	str	r0, [r5, #0]
 8007c68:	6128      	str	r0, [r5, #16]
 8007c6a:	b920      	cbnz	r0, 8007c76 <_svfiprintf_r+0x2e>
 8007c6c:	230c      	movs	r3, #12
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	e0d0      	b.n	8007e18 <_svfiprintf_r+0x1d0>
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	616b      	str	r3, [r5, #20]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	2320      	movs	r3, #32
 8007c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c88:	2330      	movs	r3, #48	; 0x30
 8007c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e30 <_svfiprintf_r+0x1e8>
 8007c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c92:	f04f 0901 	mov.w	r9, #1
 8007c96:	4623      	mov	r3, r4
 8007c98:	469a      	mov	sl, r3
 8007c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9e:	b10a      	cbz	r2, 8007ca4 <_svfiprintf_r+0x5c>
 8007ca0:	2a25      	cmp	r2, #37	; 0x25
 8007ca2:	d1f9      	bne.n	8007c98 <_svfiprintf_r+0x50>
 8007ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca8:	d00b      	beq.n	8007cc2 <_svfiprintf_r+0x7a>
 8007caa:	465b      	mov	r3, fp
 8007cac:	4622      	mov	r2, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff ff6f 	bl	8007b94 <__ssputs_r>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f000 80a9 	beq.w	8007e0e <_svfiprintf_r+0x1c6>
 8007cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cbe:	445a      	add	r2, fp
 8007cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80a1 	beq.w	8007e0e <_svfiprintf_r+0x1c6>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd6:	f10a 0a01 	add.w	sl, sl, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce4:	4654      	mov	r4, sl
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	4850      	ldr	r0, [pc, #320]	; (8007e30 <_svfiprintf_r+0x1e8>)
 8007cee:	f7f8 fa9f 	bl	8000230 <memchr>
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	b9d8      	cbnz	r0, 8007d2e <_svfiprintf_r+0xe6>
 8007cf6:	06d0      	lsls	r0, r2, #27
 8007cf8:	bf44      	itt	mi
 8007cfa:	2320      	movmi	r3, #32
 8007cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d00:	0711      	lsls	r1, r2, #28
 8007d02:	bf44      	itt	mi
 8007d04:	232b      	movmi	r3, #43	; 0x2b
 8007d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d10:	d015      	beq.n	8007d3e <_svfiprintf_r+0xf6>
 8007d12:	9a07      	ldr	r2, [sp, #28]
 8007d14:	4654      	mov	r4, sl
 8007d16:	2000      	movs	r0, #0
 8007d18:	f04f 0c0a 	mov.w	ip, #10
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d22:	3b30      	subs	r3, #48	; 0x30
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d94d      	bls.n	8007dc4 <_svfiprintf_r+0x17c>
 8007d28:	b1b0      	cbz	r0, 8007d58 <_svfiprintf_r+0x110>
 8007d2a:	9207      	str	r2, [sp, #28]
 8007d2c:	e014      	b.n	8007d58 <_svfiprintf_r+0x110>
 8007d2e:	eba0 0308 	sub.w	r3, r0, r8
 8007d32:	fa09 f303 	lsl.w	r3, r9, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	46a2      	mov	sl, r4
 8007d3c:	e7d2      	b.n	8007ce4 <_svfiprintf_r+0x9c>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfbb      	ittet	lt
 8007d4a:	425b      	neglt	r3, r3
 8007d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d50:	9307      	strge	r3, [sp, #28]
 8007d52:	9307      	strlt	r3, [sp, #28]
 8007d54:	bfb8      	it	lt
 8007d56:	9204      	strlt	r2, [sp, #16]
 8007d58:	7823      	ldrb	r3, [r4, #0]
 8007d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5c:	d10c      	bne.n	8007d78 <_svfiprintf_r+0x130>
 8007d5e:	7863      	ldrb	r3, [r4, #1]
 8007d60:	2b2a      	cmp	r3, #42	; 0x2a
 8007d62:	d134      	bne.n	8007dce <_svfiprintf_r+0x186>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	9203      	str	r2, [sp, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfb8      	it	lt
 8007d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d74:	3402      	adds	r4, #2
 8007d76:	9305      	str	r3, [sp, #20]
 8007d78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e40 <_svfiprintf_r+0x1f8>
 8007d7c:	7821      	ldrb	r1, [r4, #0]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	4650      	mov	r0, sl
 8007d82:	f7f8 fa55 	bl	8000230 <memchr>
 8007d86:	b138      	cbz	r0, 8007d98 <_svfiprintf_r+0x150>
 8007d88:	9b04      	ldr	r3, [sp, #16]
 8007d8a:	eba0 000a 	sub.w	r0, r0, sl
 8007d8e:	2240      	movs	r2, #64	; 0x40
 8007d90:	4082      	lsls	r2, r0
 8007d92:	4313      	orrs	r3, r2
 8007d94:	3401      	adds	r4, #1
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9c:	4825      	ldr	r0, [pc, #148]	; (8007e34 <_svfiprintf_r+0x1ec>)
 8007d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da2:	2206      	movs	r2, #6
 8007da4:	f7f8 fa44 	bl	8000230 <memchr>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d038      	beq.n	8007e1e <_svfiprintf_r+0x1d6>
 8007dac:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <_svfiprintf_r+0x1f0>)
 8007dae:	bb1b      	cbnz	r3, 8007df8 <_svfiprintf_r+0x1b0>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	3307      	adds	r3, #7
 8007db4:	f023 0307 	bic.w	r3, r3, #7
 8007db8:	3308      	adds	r3, #8
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbe:	4433      	add	r3, r6
 8007dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc2:	e768      	b.n	8007c96 <_svfiprintf_r+0x4e>
 8007dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc8:	460c      	mov	r4, r1
 8007dca:	2001      	movs	r0, #1
 8007dcc:	e7a6      	b.n	8007d1c <_svfiprintf_r+0xd4>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	3401      	adds	r4, #1
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f04f 0c0a 	mov.w	ip, #10
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de0:	3a30      	subs	r2, #48	; 0x30
 8007de2:	2a09      	cmp	r2, #9
 8007de4:	d903      	bls.n	8007dee <_svfiprintf_r+0x1a6>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0c6      	beq.n	8007d78 <_svfiprintf_r+0x130>
 8007dea:	9105      	str	r1, [sp, #20]
 8007dec:	e7c4      	b.n	8007d78 <_svfiprintf_r+0x130>
 8007dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df2:	4604      	mov	r4, r0
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f0      	b.n	8007dda <_svfiprintf_r+0x192>
 8007df8:	ab03      	add	r3, sp, #12
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <_svfiprintf_r+0x1f4>)
 8007e00:	a904      	add	r1, sp, #16
 8007e02:	4638      	mov	r0, r7
 8007e04:	f3af 8000 	nop.w
 8007e08:	1c42      	adds	r2, r0, #1
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	d1d6      	bne.n	8007dbc <_svfiprintf_r+0x174>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	065b      	lsls	r3, r3, #25
 8007e12:	f53f af2d 	bmi.w	8007c70 <_svfiprintf_r+0x28>
 8007e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e18:	b01d      	add	sp, #116	; 0x74
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	ab03      	add	r3, sp, #12
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	462a      	mov	r2, r5
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <_svfiprintf_r+0x1f4>)
 8007e26:	a904      	add	r1, sp, #16
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f000 f879 	bl	8007f20 <_printf_i>
 8007e2e:	e7eb      	b.n	8007e08 <_svfiprintf_r+0x1c0>
 8007e30:	080082b4 	.word	0x080082b4
 8007e34:	080082be 	.word	0x080082be
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	08007b95 	.word	0x08007b95
 8007e40:	080082ba 	.word	0x080082ba

08007e44 <_printf_common>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	4616      	mov	r6, r2
 8007e4a:	4699      	mov	r9, r3
 8007e4c:	688a      	ldr	r2, [r1, #8]
 8007e4e:	690b      	ldr	r3, [r1, #16]
 8007e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bfb8      	it	lt
 8007e58:	4613      	movlt	r3, r2
 8007e5a:	6033      	str	r3, [r6, #0]
 8007e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e60:	4607      	mov	r7, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b10a      	cbz	r2, 8007e6a <_printf_common+0x26>
 8007e66:	3301      	adds	r3, #1
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	0699      	lsls	r1, r3, #26
 8007e6e:	bf42      	ittt	mi
 8007e70:	6833      	ldrmi	r3, [r6, #0]
 8007e72:	3302      	addmi	r3, #2
 8007e74:	6033      	strmi	r3, [r6, #0]
 8007e76:	6825      	ldr	r5, [r4, #0]
 8007e78:	f015 0506 	ands.w	r5, r5, #6
 8007e7c:	d106      	bne.n	8007e8c <_printf_common+0x48>
 8007e7e:	f104 0a19 	add.w	sl, r4, #25
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	6832      	ldr	r2, [r6, #0]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc26      	bgt.n	8007eda <_printf_common+0x96>
 8007e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e90:	1e13      	subs	r3, r2, #0
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	bf18      	it	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	0692      	lsls	r2, r2, #26
 8007e9a:	d42b      	bmi.n	8007ef4 <_printf_common+0xb0>
 8007e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c0      	blx	r8
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d01e      	beq.n	8007ee8 <_printf_common+0xa4>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	6922      	ldr	r2, [r4, #16]
 8007eae:	f003 0306 	and.w	r3, r3, #6
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	bf02      	ittt	eq
 8007eb6:	68e5      	ldreq	r5, [r4, #12]
 8007eb8:	6833      	ldreq	r3, [r6, #0]
 8007eba:	1aed      	subeq	r5, r5, r3
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	bf0c      	ite	eq
 8007ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec4:	2500      	movne	r5, #0
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bfc4      	itt	gt
 8007eca:	1a9b      	subgt	r3, r3, r2
 8007ecc:	18ed      	addgt	r5, r5, r3
 8007ece:	2600      	movs	r6, #0
 8007ed0:	341a      	adds	r4, #26
 8007ed2:	42b5      	cmp	r5, r6
 8007ed4:	d11a      	bne.n	8007f0c <_printf_common+0xc8>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e008      	b.n	8007eec <_printf_common+0xa8>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4652      	mov	r2, sl
 8007ede:	4649      	mov	r1, r9
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	47c0      	blx	r8
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d103      	bne.n	8007ef0 <_printf_common+0xac>
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	e7c6      	b.n	8007e82 <_printf_common+0x3e>
 8007ef4:	18e1      	adds	r1, r4, r3
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	2030      	movs	r0, #48	; 0x30
 8007efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007efe:	4422      	add	r2, r4
 8007f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f08:	3302      	adds	r3, #2
 8007f0a:	e7c7      	b.n	8007e9c <_printf_common+0x58>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4622      	mov	r2, r4
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d0e6      	beq.n	8007ee8 <_printf_common+0xa4>
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7d9      	b.n	8007ed2 <_printf_common+0x8e>
	...

08007f20 <_printf_i>:
 8007f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	7e0f      	ldrb	r7, [r1, #24]
 8007f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f28:	2f78      	cmp	r7, #120	; 0x78
 8007f2a:	4691      	mov	r9, r2
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	469a      	mov	sl, r3
 8007f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f36:	d807      	bhi.n	8007f48 <_printf_i+0x28>
 8007f38:	2f62      	cmp	r7, #98	; 0x62
 8007f3a:	d80a      	bhi.n	8007f52 <_printf_i+0x32>
 8007f3c:	2f00      	cmp	r7, #0
 8007f3e:	f000 80d4 	beq.w	80080ea <_printf_i+0x1ca>
 8007f42:	2f58      	cmp	r7, #88	; 0x58
 8007f44:	f000 80c0 	beq.w	80080c8 <_printf_i+0x1a8>
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f50:	e03a      	b.n	8007fc8 <_printf_i+0xa8>
 8007f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f56:	2b15      	cmp	r3, #21
 8007f58:	d8f6      	bhi.n	8007f48 <_printf_i+0x28>
 8007f5a:	a101      	add	r1, pc, #4	; (adr r1, 8007f60 <_printf_i+0x40>)
 8007f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f60:	08007fb9 	.word	0x08007fb9
 8007f64:	08007fcd 	.word	0x08007fcd
 8007f68:	08007f49 	.word	0x08007f49
 8007f6c:	08007f49 	.word	0x08007f49
 8007f70:	08007f49 	.word	0x08007f49
 8007f74:	08007f49 	.word	0x08007f49
 8007f78:	08007fcd 	.word	0x08007fcd
 8007f7c:	08007f49 	.word	0x08007f49
 8007f80:	08007f49 	.word	0x08007f49
 8007f84:	08007f49 	.word	0x08007f49
 8007f88:	08007f49 	.word	0x08007f49
 8007f8c:	080080d1 	.word	0x080080d1
 8007f90:	08007ff9 	.word	0x08007ff9
 8007f94:	0800808b 	.word	0x0800808b
 8007f98:	08007f49 	.word	0x08007f49
 8007f9c:	08007f49 	.word	0x08007f49
 8007fa0:	080080f3 	.word	0x080080f3
 8007fa4:	08007f49 	.word	0x08007f49
 8007fa8:	08007ff9 	.word	0x08007ff9
 8007fac:	08007f49 	.word	0x08007f49
 8007fb0:	08007f49 	.word	0x08007f49
 8007fb4:	08008093 	.word	0x08008093
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	602a      	str	r2, [r5, #0]
 8007fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e09f      	b.n	800810c <_printf_i+0x1ec>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	0607      	lsls	r7, r0, #24
 8007fd2:	f103 0104 	add.w	r1, r3, #4
 8007fd6:	6029      	str	r1, [r5, #0]
 8007fd8:	d501      	bpl.n	8007fde <_printf_i+0xbe>
 8007fda:	681e      	ldr	r6, [r3, #0]
 8007fdc:	e003      	b.n	8007fe6 <_printf_i+0xc6>
 8007fde:	0646      	lsls	r6, r0, #25
 8007fe0:	d5fb      	bpl.n	8007fda <_printf_i+0xba>
 8007fe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	da03      	bge.n	8007ff2 <_printf_i+0xd2>
 8007fea:	232d      	movs	r3, #45	; 0x2d
 8007fec:	4276      	negs	r6, r6
 8007fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff2:	485a      	ldr	r0, [pc, #360]	; (800815c <_printf_i+0x23c>)
 8007ff4:	230a      	movs	r3, #10
 8007ff6:	e012      	b.n	800801e <_printf_i+0xfe>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	1d19      	adds	r1, r3, #4
 8007ffe:	6029      	str	r1, [r5, #0]
 8008000:	0605      	lsls	r5, r0, #24
 8008002:	d501      	bpl.n	8008008 <_printf_i+0xe8>
 8008004:	681e      	ldr	r6, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0xee>
 8008008:	0641      	lsls	r1, r0, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0xe4>
 800800c:	881e      	ldrh	r6, [r3, #0]
 800800e:	4853      	ldr	r0, [pc, #332]	; (800815c <_printf_i+0x23c>)
 8008010:	2f6f      	cmp	r7, #111	; 0x6f
 8008012:	bf0c      	ite	eq
 8008014:	2308      	moveq	r3, #8
 8008016:	230a      	movne	r3, #10
 8008018:	2100      	movs	r1, #0
 800801a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800801e:	6865      	ldr	r5, [r4, #4]
 8008020:	60a5      	str	r5, [r4, #8]
 8008022:	2d00      	cmp	r5, #0
 8008024:	bfa2      	ittt	ge
 8008026:	6821      	ldrge	r1, [r4, #0]
 8008028:	f021 0104 	bicge.w	r1, r1, #4
 800802c:	6021      	strge	r1, [r4, #0]
 800802e:	b90e      	cbnz	r6, 8008034 <_printf_i+0x114>
 8008030:	2d00      	cmp	r5, #0
 8008032:	d04b      	beq.n	80080cc <_printf_i+0x1ac>
 8008034:	4615      	mov	r5, r2
 8008036:	fbb6 f1f3 	udiv	r1, r6, r3
 800803a:	fb03 6711 	mls	r7, r3, r1, r6
 800803e:	5dc7      	ldrb	r7, [r0, r7]
 8008040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008044:	4637      	mov	r7, r6
 8008046:	42bb      	cmp	r3, r7
 8008048:	460e      	mov	r6, r1
 800804a:	d9f4      	bls.n	8008036 <_printf_i+0x116>
 800804c:	2b08      	cmp	r3, #8
 800804e:	d10b      	bne.n	8008068 <_printf_i+0x148>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07de      	lsls	r6, r3, #31
 8008054:	d508      	bpl.n	8008068 <_printf_i+0x148>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	4299      	cmp	r1, r3
 800805c:	bfde      	ittt	le
 800805e:	2330      	movle	r3, #48	; 0x30
 8008060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008068:	1b52      	subs	r2, r2, r5
 800806a:	6122      	str	r2, [r4, #16]
 800806c:	f8cd a000 	str.w	sl, [sp]
 8008070:	464b      	mov	r3, r9
 8008072:	aa03      	add	r2, sp, #12
 8008074:	4621      	mov	r1, r4
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fee4 	bl	8007e44 <_printf_common>
 800807c:	3001      	adds	r0, #1
 800807e:	d14a      	bne.n	8008116 <_printf_i+0x1f6>
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	b004      	add	sp, #16
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	f043 0320 	orr.w	r3, r3, #32
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	4833      	ldr	r0, [pc, #204]	; (8008160 <_printf_i+0x240>)
 8008094:	2778      	movs	r7, #120	; 0x78
 8008096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	6829      	ldr	r1, [r5, #0]
 800809e:	061f      	lsls	r7, r3, #24
 80080a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a4:	d402      	bmi.n	80080ac <_printf_i+0x18c>
 80080a6:	065f      	lsls	r7, r3, #25
 80080a8:	bf48      	it	mi
 80080aa:	b2b6      	uxthmi	r6, r6
 80080ac:	07df      	lsls	r7, r3, #31
 80080ae:	bf48      	it	mi
 80080b0:	f043 0320 	orrmi.w	r3, r3, #32
 80080b4:	6029      	str	r1, [r5, #0]
 80080b6:	bf48      	it	mi
 80080b8:	6023      	strmi	r3, [r4, #0]
 80080ba:	b91e      	cbnz	r6, 80080c4 <_printf_i+0x1a4>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	f023 0320 	bic.w	r3, r3, #32
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	2310      	movs	r3, #16
 80080c6:	e7a7      	b.n	8008018 <_printf_i+0xf8>
 80080c8:	4824      	ldr	r0, [pc, #144]	; (800815c <_printf_i+0x23c>)
 80080ca:	e7e4      	b.n	8008096 <_printf_i+0x176>
 80080cc:	4615      	mov	r5, r2
 80080ce:	e7bd      	b.n	800804c <_printf_i+0x12c>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	6826      	ldr	r6, [r4, #0]
 80080d4:	6961      	ldr	r1, [r4, #20]
 80080d6:	1d18      	adds	r0, r3, #4
 80080d8:	6028      	str	r0, [r5, #0]
 80080da:	0635      	lsls	r5, r6, #24
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0x1c4>
 80080e0:	6019      	str	r1, [r3, #0]
 80080e2:	e002      	b.n	80080ea <_printf_i+0x1ca>
 80080e4:	0670      	lsls	r0, r6, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0x1c0>
 80080e8:	8019      	strh	r1, [r3, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	4615      	mov	r5, r2
 80080f0:	e7bc      	b.n	800806c <_printf_i+0x14c>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	1d1a      	adds	r2, r3, #4
 80080f6:	602a      	str	r2, [r5, #0]
 80080f8:	681d      	ldr	r5, [r3, #0]
 80080fa:	6862      	ldr	r2, [r4, #4]
 80080fc:	2100      	movs	r1, #0
 80080fe:	4628      	mov	r0, r5
 8008100:	f7f8 f896 	bl	8000230 <memchr>
 8008104:	b108      	cbz	r0, 800810a <_printf_i+0x1ea>
 8008106:	1b40      	subs	r0, r0, r5
 8008108:	6060      	str	r0, [r4, #4]
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	2300      	movs	r3, #0
 8008110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008114:	e7aa      	b.n	800806c <_printf_i+0x14c>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	462a      	mov	r2, r5
 800811a:	4649      	mov	r1, r9
 800811c:	4640      	mov	r0, r8
 800811e:	47d0      	blx	sl
 8008120:	3001      	adds	r0, #1
 8008122:	d0ad      	beq.n	8008080 <_printf_i+0x160>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	079b      	lsls	r3, r3, #30
 8008128:	d413      	bmi.n	8008152 <_printf_i+0x232>
 800812a:	68e0      	ldr	r0, [r4, #12]
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	4298      	cmp	r0, r3
 8008130:	bfb8      	it	lt
 8008132:	4618      	movlt	r0, r3
 8008134:	e7a6      	b.n	8008084 <_printf_i+0x164>
 8008136:	2301      	movs	r3, #1
 8008138:	4632      	mov	r2, r6
 800813a:	4649      	mov	r1, r9
 800813c:	4640      	mov	r0, r8
 800813e:	47d0      	blx	sl
 8008140:	3001      	adds	r0, #1
 8008142:	d09d      	beq.n	8008080 <_printf_i+0x160>
 8008144:	3501      	adds	r5, #1
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	9903      	ldr	r1, [sp, #12]
 800814a:	1a5b      	subs	r3, r3, r1
 800814c:	42ab      	cmp	r3, r5
 800814e:	dcf2      	bgt.n	8008136 <_printf_i+0x216>
 8008150:	e7eb      	b.n	800812a <_printf_i+0x20a>
 8008152:	2500      	movs	r5, #0
 8008154:	f104 0619 	add.w	r6, r4, #25
 8008158:	e7f5      	b.n	8008146 <_printf_i+0x226>
 800815a:	bf00      	nop
 800815c:	080082c5 	.word	0x080082c5
 8008160:	080082d6 	.word	0x080082d6

08008164 <memmove>:
 8008164:	4288      	cmp	r0, r1
 8008166:	b510      	push	{r4, lr}
 8008168:	eb01 0402 	add.w	r4, r1, r2
 800816c:	d902      	bls.n	8008174 <memmove+0x10>
 800816e:	4284      	cmp	r4, r0
 8008170:	4623      	mov	r3, r4
 8008172:	d807      	bhi.n	8008184 <memmove+0x20>
 8008174:	1e43      	subs	r3, r0, #1
 8008176:	42a1      	cmp	r1, r4
 8008178:	d008      	beq.n	800818c <memmove+0x28>
 800817a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008182:	e7f8      	b.n	8008176 <memmove+0x12>
 8008184:	4402      	add	r2, r0
 8008186:	4601      	mov	r1, r0
 8008188:	428a      	cmp	r2, r1
 800818a:	d100      	bne.n	800818e <memmove+0x2a>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008196:	e7f7      	b.n	8008188 <memmove+0x24>

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	; (80081b4 <_sbrk_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7f9 fba4 	bl	80018f0 <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	200003b8 	.word	0x200003b8

080081b8 <memcpy>:
 80081b8:	440a      	add	r2, r1
 80081ba:	4291      	cmp	r1, r2
 80081bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c0:	d100      	bne.n	80081c4 <memcpy+0xc>
 80081c2:	4770      	bx	lr
 80081c4:	b510      	push	{r4, lr}
 80081c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ce:	4291      	cmp	r1, r2
 80081d0:	d1f9      	bne.n	80081c6 <memcpy+0xe>
 80081d2:	bd10      	pop	{r4, pc}

080081d4 <_realloc_r>:
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	4680      	mov	r8, r0
 80081da:	4614      	mov	r4, r2
 80081dc:	460e      	mov	r6, r1
 80081de:	b921      	cbnz	r1, 80081ea <_realloc_r+0x16>
 80081e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	4611      	mov	r1, r2
 80081e6:	f7ff bc49 	b.w	8007a7c <_malloc_r>
 80081ea:	b92a      	cbnz	r2, 80081f8 <_realloc_r+0x24>
 80081ec:	f7ff fbda 	bl	80079a4 <_free_r>
 80081f0:	4625      	mov	r5, r4
 80081f2:	4628      	mov	r0, r5
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	f000 f81b 	bl	8008232 <_malloc_usable_size_r>
 80081fc:	4284      	cmp	r4, r0
 80081fe:	4607      	mov	r7, r0
 8008200:	d802      	bhi.n	8008208 <_realloc_r+0x34>
 8008202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008206:	d812      	bhi.n	800822e <_realloc_r+0x5a>
 8008208:	4621      	mov	r1, r4
 800820a:	4640      	mov	r0, r8
 800820c:	f7ff fc36 	bl	8007a7c <_malloc_r>
 8008210:	4605      	mov	r5, r0
 8008212:	2800      	cmp	r0, #0
 8008214:	d0ed      	beq.n	80081f2 <_realloc_r+0x1e>
 8008216:	42bc      	cmp	r4, r7
 8008218:	4622      	mov	r2, r4
 800821a:	4631      	mov	r1, r6
 800821c:	bf28      	it	cs
 800821e:	463a      	movcs	r2, r7
 8008220:	f7ff ffca 	bl	80081b8 <memcpy>
 8008224:	4631      	mov	r1, r6
 8008226:	4640      	mov	r0, r8
 8008228:	f7ff fbbc 	bl	80079a4 <_free_r>
 800822c:	e7e1      	b.n	80081f2 <_realloc_r+0x1e>
 800822e:	4635      	mov	r5, r6
 8008230:	e7df      	b.n	80081f2 <_realloc_r+0x1e>

08008232 <_malloc_usable_size_r>:
 8008232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008236:	1f18      	subs	r0, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfbc      	itt	lt
 800823c:	580b      	ldrlt	r3, [r1, r0]
 800823e:	18c0      	addlt	r0, r0, r3
 8008240:	4770      	bx	lr
	...

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
